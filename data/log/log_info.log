24-05-02.22:07:57.808 [main            ] INFO  Application            - Starting Application using Java 1.8.0_231 on Trumen with PID 30492 (E:\Project\Job\xfg\big-market\big-market-app\target\classes started by Admin in E:\Project\Job\xfg\big-market)
24-05-02.22:07:57.809 [main            ] INFO  Application            - The following 1 profile is active: "dev"
24-05-02.22:07:58.787 [main            ] INFO  RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
24-05-02.22:07:58.789 [main            ] INFO  RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
24-05-02.22:07:58.819 [main            ] INFO  RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 14 ms. Found 0 Redis repository interfaces.
24-05-02.22:07:59.441 [main            ] INFO  TomcatWebServer        - Tomcat initialized with port(s): 8091 (http)
24-05-02.22:07:59.452 [main            ] INFO  Http11NioProtocol      - Initializing ProtocolHandler ["http-nio-8091"]
24-05-02.22:07:59.453 [main            ] INFO  StandardService        - Starting service [Tomcat]
24-05-02.22:07:59.453 [main            ] INFO  StandardEngine         - Starting Servlet engine: [Apache Tomcat/9.0.75]
24-05-02.22:07:59.706 [main            ] INFO  [/]                    - Initializing Spring embedded WebApplicationContext
24-05-02.22:07:59.706 [main            ] INFO  ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1851 ms
24-05-02.22:08:00.238 [main            ] INFO  Version                - Redisson 3.23.4
24-05-02.22:08:00.732 [redisson-netty-2-6] INFO  MasterPubSubConnectionPool - 1 connections initialized for 47.120.8.26/47.120.8.26:16379
24-05-02.22:08:01.029 [redisson-netty-2-13] INFO  MasterConnectionPool   - 5 connections initialized for 47.120.8.26/47.120.8.26:16379
24-05-02.22:08:01.912 [main            ] INFO  EndpointLinksResolver  - Exposing 1 endpoint(s) beneath base path '/actuator'
24-05-02.22:08:01.960 [main            ] INFO  Http11NioProtocol      - Starting ProtocolHandler ["http-nio-8091"]
24-05-02.22:08:01.973 [main            ] INFO  TomcatWebServer        - Tomcat started on port(s): 8091 (http) with context path ''
24-05-02.22:08:01.991 [main            ] INFO  Application            - Started Application in 4.725 seconds (JVM running for 5.841)
24-05-02.22:08:02.957 [RMI TCP Connection(2)-169.254.83.107] INFO  [/]                    - Initializing Spring DispatcherServlet 'dispatcherServlet'
24-05-02.22:08:02.957 [RMI TCP Connection(2)-169.254.83.107] INFO  DispatcherServlet      - Initializing Servlet 'dispatcherServlet'
24-05-02.22:08:02.958 [RMI TCP Connection(3)-169.254.83.107] INFO  HikariDataSource       - HikariPool-1 - Starting...
24-05-02.22:08:02.959 [RMI TCP Connection(2)-169.254.83.107] INFO  DispatcherServlet      - Completed initialization in 2 ms
24-05-02.22:08:04.014 [RMI TCP Connection(3)-169.254.83.107] INFO  HikariDataSource       - HikariPool-1 - Start completed.
24-05-02.22:08:05.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:08:05.096 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存 strategyId:100006 awardId:102
24-05-02.22:08:10.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:08:10.048 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存 strategyId:100006 awardId:102
24-05-02.22:08:15.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:08:20.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:08:20.513 [SpringApplicationShutdownHook] INFO  HikariDataSource       - HikariPool-1 - Shutdown initiated...
24-05-02.22:08:20.522 [SpringApplicationShutdownHook] INFO  HikariDataSource       - HikariPool-1 - Shutdown completed.
24-05-02.22:09:48.178 [main            ] INFO  Application            - Starting Application using Java 1.8.0_231 on Trumen with PID 41812 (E:\Project\Job\xfg\big-market\big-market-app\target\classes started by Admin in E:\Project\Job\xfg\big-market)
24-05-02.22:09:48.180 [main            ] INFO  Application            - The following 1 profile is active: "dev"
24-05-02.22:09:49.077 [main            ] INFO  RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
24-05-02.22:09:49.079 [main            ] INFO  RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
24-05-02.22:09:49.107 [main            ] INFO  RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 15 ms. Found 0 Redis repository interfaces.
24-05-02.22:09:49.658 [main            ] INFO  TomcatWebServer        - Tomcat initialized with port(s): 8091 (http)
24-05-02.22:09:49.667 [main            ] INFO  Http11NioProtocol      - Initializing ProtocolHandler ["http-nio-8091"]
24-05-02.22:09:49.668 [main            ] INFO  StandardService        - Starting service [Tomcat]
24-05-02.22:09:49.668 [main            ] INFO  StandardEngine         - Starting Servlet engine: [Apache Tomcat/9.0.75]
24-05-02.22:09:49.873 [main            ] INFO  [/]                    - Initializing Spring embedded WebApplicationContext
24-05-02.22:09:49.874 [main            ] INFO  ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1654 ms
24-05-02.22:09:50.379 [main            ] INFO  Version                - Redisson 3.23.4
24-05-02.22:09:50.892 [redisson-netty-2-4] INFO  MasterPubSubConnectionPool - 1 connections initialized for 47.120.8.26/47.120.8.26:16379
24-05-02.22:09:51.195 [redisson-netty-2-13] INFO  MasterConnectionPool   - 5 connections initialized for 47.120.8.26/47.120.8.26:16379
24-05-02.22:09:52.063 [main            ] INFO  EndpointLinksResolver  - Exposing 1 endpoint(s) beneath base path '/actuator'
24-05-02.22:09:52.097 [main            ] INFO  Http11NioProtocol      - Starting ProtocolHandler ["http-nio-8091"]
24-05-02.22:09:52.107 [main            ] INFO  TomcatWebServer        - Tomcat started on port(s): 8091 (http) with context path ''
24-05-02.22:09:52.124 [main            ] INFO  Application            - Started Application in 4.495 seconds (JVM running for 5.601)
24-05-02.22:09:52.529 [RMI TCP Connection(1)-169.254.83.107] INFO  [/]                    - Initializing Spring DispatcherServlet 'dispatcherServlet'
24-05-02.22:09:52.529 [RMI TCP Connection(1)-169.254.83.107] INFO  DispatcherServlet      - Initializing Servlet 'dispatcherServlet'
24-05-02.22:09:52.532 [RMI TCP Connection(1)-169.254.83.107] INFO  DispatcherServlet      - Completed initialization in 2 ms
24-05-02.22:09:52.936 [RMI TCP Connection(3)-169.254.83.107] INFO  HikariDataSource       - HikariPool-1 - Starting...
24-05-02.22:09:53.972 [RMI TCP Connection(3)-169.254.83.107] INFO  HikariDataSource       - HikariPool-1 - Start completed.
24-05-02.22:09:55.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:10:00.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:10:05.013 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:10:10.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:10:15.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:10:20.000 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:10:25.013 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:10:30.015 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:10:35.001 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:10:40.014 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:10:45.003 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:10:50.000 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:10:55.014 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:11:00.011 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:11:05.001 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:11:10.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:11:15.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:11:20.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:11:25.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:11:30.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:11:35.001 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:11:40.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:11:45.014 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:11:50.003 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:11:55.003 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:12:00.001 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:12:05.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:12:10.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:12:15.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:12:20.013 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:12:25.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:12:30.013 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:12:35.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:12:40.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:12:45.014 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:12:50.003 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:12:55.003 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:13:00.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:13:05.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:13:10.000 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:13:15.014 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:13:20.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:13:25.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:13:30.011 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:13:35.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:13:40.011 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:13:45.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:13:50.013 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:13:55.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:14:00.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:14:05.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:14:10.003 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:14:15.015 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:14:20.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:14:25.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:14:30.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:14:35.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:14:40.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:14:45.013 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:14:50.014 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:14:55.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:15:00.015 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:15:05.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:15:10.011 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:15:15.003 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:15:20.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:15:25.014 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:15:30.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:15:35.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:15:40.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:15:45.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:15:50.015 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:15:55.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:16:00.011 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:16:05.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:16:10.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:16:15.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:16:20.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:16:25.001 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:16:30.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:16:35.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:16:40.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:16:45.001 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:16:50.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:16:55.001 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:17:00.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:17:05.011 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:17:10.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:17:15.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:17:20.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:17:25.014 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:17:30.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:17:35.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:17:40.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:17:41.105 [http-nio-8091-exec-1] INFO  RaffleController       - 抽奖装配策略开始： strategyID: 10006
24-05-02.22:17:41.342 [http-nio-8091-exec-1] INFO  RaffleController       - 抽奖装配策略失败： strategyID: 10006
java.lang.ArithmeticException: / by zero
	at java.math.BigDecimal.divideAndRound(BigDecimal.java:4137)
	at java.math.BigDecimal.divide(BigDecimal.java:5229)
	at java.math.BigDecimal.divide(BigDecimal.java:1564)
	at java.math.BigDecimal.divide(BigDecimal.java:1594)
	at cn.bugstack.domain.strategy.service.armory.StrategyArmoryDispatch.assembleLotteryStrategy(StrategyArmoryDispatch.java:106)
	at cn.bugstack.domain.strategy.service.armory.StrategyArmoryDispatch.assembleLotteryStrategy(StrategyArmoryDispatch.java:51)
	at cn.bugstack.trigger.http.RaffleController.strategyArmory(RaffleController.java:58)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:96)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:926)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1791)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
24-05-02.22:17:45.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:17:50.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:17:55.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:18:00.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:18:05.013 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:18:10.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:18:15.014 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:18:20.000 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:18:25.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:18:30.011 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:18:31.952 [http-nio-8091-exec-4] INFO  RaffleController       - 抽奖装配策略开始： strategyID: 10006
24-05-02.22:18:32.099 [http-nio-8091-exec-4] INFO  RaffleController       - 抽奖装配策略失败： strategyID: 10006
java.lang.ArithmeticException: / by zero
	at java.math.BigDecimal.divideAndRound(BigDecimal.java:4137)
	at java.math.BigDecimal.divide(BigDecimal.java:5229)
	at java.math.BigDecimal.divide(BigDecimal.java:1564)
	at java.math.BigDecimal.divide(BigDecimal.java:1594)
	at cn.bugstack.domain.strategy.service.armory.StrategyArmoryDispatch.assembleLotteryStrategy(StrategyArmoryDispatch.java:106)
	at cn.bugstack.domain.strategy.service.armory.StrategyArmoryDispatch.assembleLotteryStrategy(StrategyArmoryDispatch.java:51)
	at cn.bugstack.trigger.http.RaffleController.strategyArmory(RaffleController.java:58)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:96)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:926)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1791)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
24-05-02.22:18:33.239 [http-nio-8091-exec-6] INFO  RaffleController       - 抽奖装配策略开始： strategyID: 10006
24-05-02.22:18:33.378 [http-nio-8091-exec-6] INFO  RaffleController       - 抽奖装配策略失败： strategyID: 10006
java.lang.ArithmeticException: / by zero
	at java.math.BigDecimal.divideAndRound(BigDecimal.java:4137)
	at java.math.BigDecimal.divide(BigDecimal.java:5229)
	at java.math.BigDecimal.divide(BigDecimal.java:1564)
	at java.math.BigDecimal.divide(BigDecimal.java:1594)
	at cn.bugstack.domain.strategy.service.armory.StrategyArmoryDispatch.assembleLotteryStrategy(StrategyArmoryDispatch.java:106)
	at cn.bugstack.domain.strategy.service.armory.StrategyArmoryDispatch.assembleLotteryStrategy(StrategyArmoryDispatch.java:51)
	at cn.bugstack.trigger.http.RaffleController.strategyArmory(RaffleController.java:58)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1072)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:965)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:529)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:623)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:209)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:96)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:178)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:153)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:481)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:130)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:926)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1791)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
24-05-02.22:18:35.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:18:40.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:18:45.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:18:50.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:18:55.011 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:19:00.011 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:19:05.014 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:19:10.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:19:15.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:19:20.015 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:19:25.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:19:30.015 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:19:35.001 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:19:40.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:19:45.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:19:50.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:19:55.000 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:20:00.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:20:05.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:20:10.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:20:15.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:20:20.001 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:20:25.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:20:30.001 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:20:35.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:20:40.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:20:45.020 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:20:50.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:20:55.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:21:00.014 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:21:05.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:21:10.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:21:15.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:21:20.014 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:21:25.003 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:21:30.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:21:35.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:21:40.003 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:21:45.003 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:21:50.011 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:21:55.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:22:00.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:22:05.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:22:10.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:22:15.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:22:20.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:22:25.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:22:30.001 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:22:35.001 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:22:40.013 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:22:45.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:22:50.014 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:22:55.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:23:00.014 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:23:05.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:23:10.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:23:15.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:23:20.011 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:23:25.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:23:30.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:23:35.014 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:23:40.001 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:23:45.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:23:50.003 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:23:55.003 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:24:00.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:24:05.014 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:24:10.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:24:15.013 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:24:20.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:24:25.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:24:30.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:24:35.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:24:40.015 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:24:45.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:24:50.011 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:24:51.656 [http-nio-8091-exec-8] WARN  DefaultHandlerExceptionResolver - Resolved [org.springframework.http.converter.HttpMessageNotReadableException: Required request body is missing: public cn.bugstack.types.model.Response<java.util.List<cn.bugstack.trigger.api.dto.RaffleAwardListResponseDTO>> cn.bugstack.trigger.http.RaffleController.queryRaffleAwardList(cn.bugstack.trigger.api.dto.RaffleAwardListRequestDTO)]
24-05-02.22:24:55.003 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:25:00.011 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:25:05.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:25:10.011 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:25:15.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:25:20.015 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:25:25.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:25:30.014 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:25:35.013 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:25:40.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:25:42.066 [http-nio-8091-exec-3] WARN  DefaultHandlerExceptionResolver - Resolved [org.springframework.http.converter.HttpMessageNotReadableException: Required request body is missing: public cn.bugstack.types.model.Response<cn.bugstack.trigger.api.dto.RaffleResponseDTO> cn.bugstack.trigger.http.RaffleController.randomRaffle(cn.bugstack.trigger.api.dto.RaffleRequestDTO)]
24-05-02.22:25:45.003 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:25:50.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:25:55.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:26:00.001 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:26:05.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:26:10.015 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:26:15.000 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:26:20.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:26:25.003 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:26:30.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:26:35.001 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:26:40.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:26:45.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:26:50.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:26:55.013 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:27:00.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:27:05.013 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:27:10.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:27:15.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:27:20.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:27:25.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:27:30.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:27:35.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:27:40.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:27:45.015 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:27:50.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:27:55.001 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:28:00.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:28:05.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:28:10.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:28:15.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:28:20.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:28:25.014 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:28:30.011 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:28:35.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:28:40.003 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:28:45.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:28:50.013 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:28:55.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:29:00.001 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:29:05.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:29:10.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:29:15.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:29:20.003 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:29:23.789 [SpringApplicationShutdownHook] INFO  HikariDataSource       - HikariPool-1 - Shutdown initiated...
24-05-02.22:29:23.798 [SpringApplicationShutdownHook] INFO  HikariDataSource       - HikariPool-1 - Shutdown completed.
24-05-02.22:29:42.603 [main            ] INFO  Application            - Starting Application using Java 1.8.0_231 on Trumen with PID 49576 (E:\Project\Job\xfg\big-market\big-market-app\target\classes started by Admin in E:\Project\Job\xfg\big-market)
24-05-02.22:29:42.604 [main            ] INFO  Application            - The following 1 profile is active: "dev"
24-05-02.22:29:43.468 [main            ] INFO  RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
24-05-02.22:29:43.471 [main            ] INFO  RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
24-05-02.22:29:43.503 [main            ] INFO  RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 15 ms. Found 0 Redis repository interfaces.
24-05-02.22:29:44.049 [main            ] INFO  TomcatWebServer        - Tomcat initialized with port(s): 8091 (http)
24-05-02.22:29:44.057 [main            ] INFO  Http11NioProtocol      - Initializing ProtocolHandler ["http-nio-8091"]
24-05-02.22:29:44.057 [main            ] INFO  StandardService        - Starting service [Tomcat]
24-05-02.22:29:44.057 [main            ] INFO  StandardEngine         - Starting Servlet engine: [Apache Tomcat/9.0.75]
24-05-02.22:29:44.217 [main            ] INFO  [/]                    - Initializing Spring embedded WebApplicationContext
24-05-02.22:29:44.217 [main            ] INFO  ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1576 ms
24-05-02.22:29:44.799 [main            ] INFO  Version                - Redisson 3.23.4
24-05-02.22:29:45.297 [redisson-netty-2-5] INFO  MasterPubSubConnectionPool - 1 connections initialized for 47.120.8.26/47.120.8.26:16379
24-05-02.22:29:45.612 [redisson-netty-2-13] INFO  MasterConnectionPool   - 5 connections initialized for 47.120.8.26/47.120.8.26:16379
24-05-02.22:29:46.466 [main            ] INFO  EndpointLinksResolver  - Exposing 1 endpoint(s) beneath base path '/actuator'
24-05-02.22:29:46.503 [main            ] INFO  Http11NioProtocol      - Starting ProtocolHandler ["http-nio-8091"]
24-05-02.22:29:46.514 [main            ] INFO  TomcatWebServer        - Tomcat started on port(s): 8091 (http) with context path ''
24-05-02.22:29:46.531 [main            ] INFO  Application            - Started Application in 4.395 seconds (JVM running for 5.321)
24-05-02.22:29:47.295 [RMI TCP Connection(4)-169.254.83.107] INFO  [/]                    - Initializing Spring DispatcherServlet 'dispatcherServlet'
24-05-02.22:29:47.296 [RMI TCP Connection(4)-169.254.83.107] INFO  DispatcherServlet      - Initializing Servlet 'dispatcherServlet'
24-05-02.22:29:47.301 [RMI TCP Connection(4)-169.254.83.107] INFO  DispatcherServlet      - Completed initialization in 5 ms
24-05-02.22:29:47.302 [RMI TCP Connection(5)-169.254.83.107] INFO  HikariDataSource       - HikariPool-1 - Starting...
24-05-02.22:29:48.232 [RMI TCP Connection(5)-169.254.83.107] INFO  HikariDataSource       - HikariPool-1 - Start completed.
24-05-02.22:29:50.001 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:29:55.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:30:00.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:30:05.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:30:10.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:30:15.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:30:20.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:30:25.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:30:29.792 [http-nio-8091-exec-1] INFO  RaffleController       - 抽奖装配策略开始： strategyID: 10006
24-05-02.22:30:30.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:30:55.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:31:00.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:31:05.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:31:10.001 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:31:15.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:31:20.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:31:25.015 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:31:29.907 [SpringApplicationShutdownHook] INFO  HikariDataSource       - HikariPool-1 - Shutdown initiated...
24-05-02.22:31:29.915 [SpringApplicationShutdownHook] INFO  HikariDataSource       - HikariPool-1 - Shutdown completed.
24-05-02.22:31:37.150 [main            ] INFO  Application            - Starting Application using Java 1.8.0_231 on Trumen with PID 56736 (E:\Project\Job\xfg\big-market\big-market-app\target\classes started by Admin in E:\Project\Job\xfg\big-market)
24-05-02.22:31:37.151 [main            ] INFO  Application            - The following 1 profile is active: "dev"
24-05-02.22:31:38.032 [main            ] INFO  RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
24-05-02.22:31:38.034 [main            ] INFO  RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
24-05-02.22:31:38.065 [main            ] INFO  RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 16 ms. Found 0 Redis repository interfaces.
24-05-02.22:31:38.634 [main            ] INFO  TomcatWebServer        - Tomcat initialized with port(s): 8091 (http)
24-05-02.22:31:38.641 [main            ] INFO  Http11NioProtocol      - Initializing ProtocolHandler ["http-nio-8091"]
24-05-02.22:31:38.642 [main            ] INFO  StandardService        - Starting service [Tomcat]
24-05-02.22:31:38.642 [main            ] INFO  StandardEngine         - Starting Servlet engine: [Apache Tomcat/9.0.75]
24-05-02.22:31:38.876 [main            ] INFO  [/]                    - Initializing Spring embedded WebApplicationContext
24-05-02.22:31:38.877 [main            ] INFO  ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1686 ms
24-05-02.22:31:39.369 [main            ] INFO  Version                - Redisson 3.23.4
24-05-02.22:31:39.852 [redisson-netty-2-5] INFO  MasterPubSubConnectionPool - 1 connections initialized for 47.120.8.26/47.120.8.26:16379
24-05-02.22:31:40.147 [redisson-netty-2-13] INFO  MasterConnectionPool   - 5 connections initialized for 47.120.8.26/47.120.8.26:16379
24-05-02.22:31:41.133 [main            ] INFO  EndpointLinksResolver  - Exposing 1 endpoint(s) beneath base path '/actuator'
24-05-02.22:31:41.163 [main            ] INFO  Http11NioProtocol      - Starting ProtocolHandler ["http-nio-8091"]
24-05-02.22:31:41.173 [main            ] INFO  TomcatWebServer        - Tomcat started on port(s): 8091 (http) with context path ''
24-05-02.22:31:41.189 [main            ] INFO  Application            - Started Application in 4.495 seconds (JVM running for 5.401)
24-05-02.22:31:41.780 [RMI TCP Connection(3)-169.254.83.107] INFO  [/]                    - Initializing Spring DispatcherServlet 'dispatcherServlet'
24-05-02.22:31:41.781 [RMI TCP Connection(3)-169.254.83.107] INFO  DispatcherServlet      - Initializing Servlet 'dispatcherServlet'
24-05-02.22:31:41.783 [RMI TCP Connection(4)-169.254.83.107] INFO  HikariDataSource       - HikariPool-1 - Starting...
24-05-02.22:31:41.784 [RMI TCP Connection(3)-169.254.83.107] INFO  DispatcherServlet      - Completed initialization in 3 ms
24-05-02.22:31:42.915 [RMI TCP Connection(4)-169.254.83.107] INFO  HikariDataSource       - HikariPool-1 - Start completed.
24-05-02.22:31:45.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:31:50.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:31:54.791 [http-nio-8091-exec-1] INFO  RaffleController       - 抽奖装配策略开始： strategyID: 10006
24-05-02.22:31:55.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:35:53.140 [HikariPool-1 housekeeper] WARN  HikariPool             - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=4m10s110ms584µs600ns).
24-05-02.22:35:55.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:36:00.014 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:36:00.706 [SpringApplicationShutdownHook] INFO  HikariDataSource       - HikariPool-1 - Shutdown initiated...
24-05-02.22:36:00.715 [SpringApplicationShutdownHook] INFO  HikariDataSource       - HikariPool-1 - Shutdown completed.
24-05-02.22:36:03.626 [main            ] INFO  Application            - Starting Application using Java 1.8.0_231 on Trumen with PID 43748 (E:\Project\Job\xfg\big-market\big-market-app\target\classes started by Admin in E:\Project\Job\xfg\big-market)
24-05-02.22:36:03.627 [main            ] INFO  Application            - The following 1 profile is active: "dev"
24-05-02.22:36:04.435 [main            ] INFO  RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
24-05-02.22:36:04.437 [main            ] INFO  RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
24-05-02.22:36:04.463 [main            ] INFO  RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 13 ms. Found 0 Redis repository interfaces.
24-05-02.22:36:04.948 [main            ] INFO  TomcatWebServer        - Tomcat initialized with port(s): 8091 (http)
24-05-02.22:36:04.955 [main            ] INFO  Http11NioProtocol      - Initializing ProtocolHandler ["http-nio-8091"]
24-05-02.22:36:04.955 [main            ] INFO  StandardService        - Starting service [Tomcat]
24-05-02.22:36:04.955 [main            ] INFO  StandardEngine         - Starting Servlet engine: [Apache Tomcat/9.0.75]
24-05-02.22:36:05.149 [main            ] INFO  [/]                    - Initializing Spring embedded WebApplicationContext
24-05-02.22:36:05.150 [main            ] INFO  ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1482 ms
24-05-02.22:36:05.594 [main            ] INFO  Version                - Redisson 3.23.4
24-05-02.22:36:06.053 [redisson-netty-2-6] INFO  MasterPubSubConnectionPool - 1 connections initialized for 47.120.8.26/47.120.8.26:16379
24-05-02.22:36:06.331 [redisson-netty-2-13] INFO  MasterConnectionPool   - 5 connections initialized for 47.120.8.26/47.120.8.26:16379
24-05-02.22:36:07.086 [main            ] INFO  EndpointLinksResolver  - Exposing 1 endpoint(s) beneath base path '/actuator'
24-05-02.22:36:07.120 [main            ] INFO  Http11NioProtocol      - Starting ProtocolHandler ["http-nio-8091"]
24-05-02.22:36:07.134 [main            ] INFO  TomcatWebServer        - Tomcat started on port(s): 8091 (http) with context path ''
24-05-02.22:36:07.150 [main            ] INFO  Application            - Started Application in 3.952 seconds (JVM running for 4.831)
24-05-02.22:36:07.881 [RMI TCP Connection(2)-169.254.83.107] INFO  [/]                    - Initializing Spring DispatcherServlet 'dispatcherServlet'
24-05-02.22:36:07.881 [RMI TCP Connection(2)-169.254.83.107] INFO  DispatcherServlet      - Initializing Servlet 'dispatcherServlet'
24-05-02.22:36:07.882 [RMI TCP Connection(1)-169.254.83.107] INFO  HikariDataSource       - HikariPool-1 - Starting...
24-05-02.22:36:07.883 [RMI TCP Connection(2)-169.254.83.107] INFO  DispatcherServlet      - Completed initialization in 2 ms
24-05-02.22:36:08.962 [RMI TCP Connection(1)-169.254.83.107] INFO  HikariDataSource       - HikariPool-1 - Start completed.
24-05-02.22:36:10.013 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:36:13.870 [http-nio-8091-exec-1] INFO  RaffleController       - 抽奖装配策略开始： strategyID: 10006
24-05-02.22:36:22.419 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:37:12.976 [HikariPool-1 housekeeper] WARN  HikariPool             - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1m3s904ms187µs).
24-05-02.22:37:12.976 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:37:15.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:37:20.001 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:37:20.534 [SpringApplicationShutdownHook] INFO  HikariDataSource       - HikariPool-1 - Shutdown initiated...
24-05-02.22:37:20.543 [SpringApplicationShutdownHook] INFO  HikariDataSource       - HikariPool-1 - Shutdown completed.
24-05-02.22:37:23.691 [main            ] INFO  Application            - Starting Application using Java 1.8.0_231 on Trumen with PID 39860 (E:\Project\Job\xfg\big-market\big-market-app\target\classes started by Admin in E:\Project\Job\xfg\big-market)
24-05-02.22:37:23.692 [main            ] INFO  Application            - The following 1 profile is active: "dev"
24-05-02.22:37:24.480 [main            ] INFO  RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
24-05-02.22:37:24.483 [main            ] INFO  RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
24-05-02.22:37:24.511 [main            ] INFO  RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 15 ms. Found 0 Redis repository interfaces.
24-05-02.22:37:25.011 [main            ] INFO  TomcatWebServer        - Tomcat initialized with port(s): 8091 (http)
24-05-02.22:37:25.019 [main            ] INFO  Http11NioProtocol      - Initializing ProtocolHandler ["http-nio-8091"]
24-05-02.22:37:25.019 [main            ] INFO  StandardService        - Starting service [Tomcat]
24-05-02.22:37:25.019 [main            ] INFO  StandardEngine         - Starting Servlet engine: [Apache Tomcat/9.0.75]
24-05-02.22:37:25.246 [main            ] INFO  [/]                    - Initializing Spring embedded WebApplicationContext
24-05-02.22:37:25.246 [main            ] INFO  ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1517 ms
24-05-02.22:37:25.710 [main            ] INFO  Version                - Redisson 3.23.4
24-05-02.22:37:26.201 [redisson-netty-2-5] INFO  MasterPubSubConnectionPool - 1 connections initialized for 47.120.8.26/47.120.8.26:16379
24-05-02.22:37:26.489 [redisson-netty-2-13] INFO  MasterConnectionPool   - 5 connections initialized for 47.120.8.26/47.120.8.26:16379
24-05-02.22:37:27.314 [main            ] INFO  EndpointLinksResolver  - Exposing 1 endpoint(s) beneath base path '/actuator'
24-05-02.22:37:27.345 [main            ] INFO  Http11NioProtocol      - Starting ProtocolHandler ["http-nio-8091"]
24-05-02.22:37:27.354 [main            ] INFO  TomcatWebServer        - Tomcat started on port(s): 8091 (http) with context path ''
24-05-02.22:37:27.370 [main            ] INFO  Application            - Started Application in 4.117 seconds (JVM running for 5.053)
24-05-02.22:37:28.002 [RMI TCP Connection(1)-169.254.83.107] INFO  [/]                    - Initializing Spring DispatcherServlet 'dispatcherServlet'
24-05-02.22:37:28.002 [RMI TCP Connection(1)-169.254.83.107] INFO  DispatcherServlet      - Initializing Servlet 'dispatcherServlet'
24-05-02.22:37:28.006 [RMI TCP Connection(1)-169.254.83.107] INFO  DispatcherServlet      - Completed initialization in 4 ms
24-05-02.22:37:28.016 [RMI TCP Connection(2)-169.254.83.107] INFO  HikariDataSource       - HikariPool-1 - Starting...
24-05-02.22:37:29.130 [RMI TCP Connection(2)-169.254.83.107] INFO  HikariDataSource       - HikariPool-1 - Start completed.
24-05-02.22:37:30.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:37:31.693 [http-nio-8091-exec-1] INFO  RaffleController       - 抽奖装配策略开始： strategyID: 100006
24-05-02.22:37:38.229 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:37:42.656 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:38:44.963 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:38:44.963 [HikariPool-1 housekeeper] WARN  HikariPool             - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1m15s732ms280µs500ns).
24-05-02.22:38:45.001 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:38:55.725 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:39:22.807 [http-nio-8091-exec-1] INFO  RaffleController       - 抽奖装配策略完成： strategyID: 100006, response: {"code":"0000","data":true,"info":"成功"}
24-05-02.22:39:25.014 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:39:30.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:39:33.963 [http-nio-8091-exec-2] INFO  RaffleController       - 抽奖装配策略开始： strategyID: 100006
24-05-02.22:39:38.782 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:39:38.892 [http-nio-8091-exec-2] INFO  RaffleController       - 抽奖装配策略完成： strategyID: 100006, response: {"code":"0000","data":true,"info":"成功"}
24-05-02.22:39:40.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:39:43.242 [http-nio-8091-exec-4] INFO  RaffleController       - 抽奖装配策略开始： strategyID: 100006
24-05-02.22:39:43.455 [http-nio-8091-exec-4] INFO  RaffleController       - 抽奖装配策略完成： strategyID: 100006, response: {"code":"0000","data":true,"info":"成功"}
24-05-02.22:39:45.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:39:50.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:39:55.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:40:00.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:40:05.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:40:06.093 [http-nio-8091-exec-6] WARN  DefaultHandlerExceptionResolver - Resolved [org.springframework.http.converter.HttpMessageNotReadableException: Required request body is missing: public cn.bugstack.types.model.Response<cn.bugstack.trigger.api.dto.RaffleResponseDTO> cn.bugstack.trigger.http.RaffleController.randomRaffle(cn.bugstack.trigger.api.dto.RaffleRequestDTO)]
24-05-02.22:40:10.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:40:15.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:40:20.001 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:40:25.011 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:40:30.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:40:35.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:40:40.011 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:40:45.003 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:40:50.003 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:40:55.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:41:00.011 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:41:05.001 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:41:10.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:41:15.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:41:20.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:41:25.014 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:41:28.711 [http-nio-8091-exec-10] INFO  RaffleController       - 随机抽奖开始： strategyID: 100006
24-05-02.22:41:28.857 [http-nio-8091-exec-10] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userID: system strategyID: 100006 ruleModel: rule_default awardId: 102
24-05-02.22:41:28.858 [http-nio-8091-exec-10] INFO  AbstractRaffleStrategy - 抽奖策略计算-责任链 system 100006 102 rule_default
24-05-02.22:41:29.147 [http-nio-8091-exec-10] INFO  RuleLockLogicTreeNode  - 规则过滤-次数锁 userId:system strategyId:100006 awardId:102
24-05-02.22:41:29.148 [http-nio-8091-exec-10] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock node:rule_lock code:0000
24-05-02.22:41:29.149 [http-nio-8091-exec-10] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100006 awardId:102
24-05-02.22:41:29.217 [http-nio-8091-exec-10] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId: system strategyId: 100006 awardId: 102
24-05-02.22:41:29.306 [http-nio-8091-exec-10] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock node:rule_stock code:0001
24-05-02.22:41:29.307 [http-nio-8091-exec-10] INFO  RuleLuckAwardLogicTreeNode - 规则过滤-兜底奖品 userId:system strategyId:100006 awardId:102 ruleValue:101:1,100
24-05-02.22:41:29.307 [http-nio-8091-exec-10] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock node:rule_luck_award code:0001
24-05-02.22:41:29.307 [http-nio-8091-exec-10] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100006 101 1,100
24-05-02.22:41:29.425 [http-nio-8091-exec-10] INFO  RaffleController       - 随机抽奖完成： strategyID: 100006 response: {"code":"0000","data":{"awardId":101,"awardIndex":1},"info":"成功"}
24-05-02.22:41:30.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:41:33.176 [http-nio-8091-exec-9] INFO  RaffleController       - 随机抽奖开始： strategyID: 100006
24-05-02.22:41:33.317 [http-nio-8091-exec-9] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userID: system strategyID: 100006 ruleModel: rule_default awardId: 102
24-05-02.22:41:33.317 [http-nio-8091-exec-9] INFO  AbstractRaffleStrategy - 抽奖策略计算-责任链 system 100006 102 rule_default
24-05-02.22:41:33.450 [http-nio-8091-exec-9] INFO  RuleLockLogicTreeNode  - 规则过滤-次数锁 userId:system strategyId:100006 awardId:102
24-05-02.22:41:33.450 [http-nio-8091-exec-9] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock node:rule_lock code:0000
24-05-02.22:41:33.450 [http-nio-8091-exec-9] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100006 awardId:102
24-05-02.22:41:33.524 [http-nio-8091-exec-9] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId: system strategyId: 100006 awardId: 102
24-05-02.22:41:33.559 [http-nio-8091-exec-9] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock node:rule_stock code:0001
24-05-02.22:41:33.559 [http-nio-8091-exec-9] INFO  RuleLuckAwardLogicTreeNode - 规则过滤-兜底奖品 userId:system strategyId:100006 awardId:102 ruleValue:101:1,100
24-05-02.22:41:33.559 [http-nio-8091-exec-9] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock node:rule_luck_award code:0001
24-05-02.22:41:33.559 [http-nio-8091-exec-9] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100006 101 1,100
24-05-02.22:41:33.592 [http-nio-8091-exec-9] INFO  RaffleController       - 随机抽奖完成： strategyID: 100006 response: {"code":"0000","data":{"awardId":101,"awardIndex":1},"info":"成功"}
24-05-02.22:41:35.001 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:41:35.034 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存 strategyId:100006 awardId:102
24-05-02.22:41:40.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:41:40.048 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存 strategyId:100006 awardId:102
24-05-02.22:41:45.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:41:50.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:41:55.001 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:41:55.428 [http-nio-8091-exec-1] INFO  RaffleController       - 抽奖装配策略开始： strategyID: 100006
24-05-02.22:41:55.471 [http-nio-8091-exec-1] INFO  RaffleController       - 抽奖装配策略完成： strategyID: 100006, response: {"code":"0000","data":[{"awardId":101,"awardTitle":"随机积分","sort":1},{"awardId":102,"awardTitle":"随机积分","sort":1}],"info":"成功"}
24-05-02.22:42:00.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:42:05.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:42:10.013 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:42:15.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:42:20.013 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:42:25.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:42:30.001 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:42:35.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:42:38.526 [http-nio-8091-exec-5] INFO  RaffleController       - 随机抽奖开始： strategyID: 100006
24-05-02.22:42:38.668 [http-nio-8091-exec-5] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userID: system strategyID: 100006 ruleModel: rule_default awardId: 102
24-05-02.22:42:38.668 [http-nio-8091-exec-5] INFO  AbstractRaffleStrategy - 抽奖策略计算-责任链 system 100006 102 rule_default
24-05-02.22:42:38.783 [http-nio-8091-exec-5] INFO  RuleLockLogicTreeNode  - 规则过滤-次数锁 userId:system strategyId:100006 awardId:102
24-05-02.22:42:38.783 [http-nio-8091-exec-5] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock node:rule_lock code:0000
24-05-02.22:42:38.783 [http-nio-8091-exec-5] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100006 awardId:102
24-05-02.22:42:38.854 [http-nio-8091-exec-5] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId: system strategyId: 100006 awardId: 102
24-05-02.22:42:38.889 [http-nio-8091-exec-5] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock node:rule_stock code:0001
24-05-02.22:42:38.889 [http-nio-8091-exec-5] INFO  RuleLuckAwardLogicTreeNode - 规则过滤-兜底奖品 userId:system strategyId:100006 awardId:102 ruleValue:101:1,100
24-05-02.22:42:38.890 [http-nio-8091-exec-5] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock node:rule_luck_award code:0001
24-05-02.22:42:38.890 [http-nio-8091-exec-5] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100006 101 1,100
24-05-02.22:42:38.924 [http-nio-8091-exec-5] INFO  RaffleController       - 随机抽奖完成： strategyID: 100006 response: {"code":"0000","data":{"awardId":101,"awardIndex":1},"info":"成功"}
24-05-02.22:42:40.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:42:45.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:42:45.045 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存 strategyId:100006 awardId:102
24-05-02.22:42:50.015 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:42:55.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:43:00.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:43:05.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:43:10.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:43:15.014 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:43:20.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:43:25.014 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:43:30.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:43:35.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:43:40.013 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:43:45.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:43:50.001 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:43:55.014 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:44:00.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:44:05.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:44:10.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:44:15.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:44:20.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:44:25.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:44:30.014 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:44:35.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:44:40.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:44:45.001 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:44:50.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:44:55.013 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:45:00.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:45:05.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:45:10.014 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:45:15.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:45:20.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:45:25.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:45:30.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:45:35.001 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:45:40.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:45:45.001 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:45:50.015 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:45:55.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:46:00.014 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:46:05.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:46:10.014 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:46:15.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:46:20.011 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:46:25.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:46:30.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:46:35.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:46:40.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:46:45.015 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:46:50.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:46:55.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:47:00.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:47:05.015 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:47:10.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:47:15.015 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:47:20.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:47:25.011 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:47:30.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:47:35.011 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:47:40.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:47:45.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:47:50.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:47:55.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:48:00.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:48:05.001 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:48:10.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:48:15.000 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:48:20.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:48:25.011 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:48:30.013 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:48:35.013 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:48:40.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:48:45.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:48:50.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:48:55.001 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:49:00.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:49:05.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:49:10.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:49:15.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:49:20.011 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:49:25.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:49:30.011 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:49:35.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:49:40.013 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:49:45.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:49:50.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:49:55.001 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:50:00.011 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:50:05.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:50:10.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:50:15.003 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:50:20.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:50:25.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:50:30.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:50:35.000 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:50:40.001 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:50:45.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:50:50.015 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:50:55.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:51:00.014 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:51:05.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:51:10.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:51:15.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:51:20.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:51:25.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:51:30.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:51:35.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:51:40.014 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:51:45.001 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:51:50.013 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:51:55.015 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:52:00.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:52:05.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:52:10.014 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:52:15.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:52:20.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:52:25.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:52:30.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:52:35.014 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:52:40.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:52:45.013 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:52:50.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:52:55.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:53:00.014 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:53:05.014 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:53:10.014 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:53:15.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:53:20.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:53:25.011 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:53:30.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:53:35.015 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:53:40.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:53:45.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:53:50.000 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:53:55.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:54:00.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:54:05.001 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:54:10.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:54:15.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:54:20.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:54:25.011 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:54:30.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:54:35.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:54:40.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:54:45.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:54:50.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:54:55.015 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:55:00.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:55:05.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:55:10.014 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:55:15.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:55:20.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:55:25.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:55:30.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:55:35.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:55:40.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:55:45.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:55:50.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:55:55.001 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:56:00.014 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:56:05.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:56:10.013 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:56:15.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:56:20.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:56:25.014 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:56:30.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:56:35.011 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:56:40.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:56:45.001 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:56:50.015 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:56:55.014 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:57:00.013 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:57:05.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:57:10.003 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:57:15.015 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:57:20.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:57:25.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:57:30.001 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:57:35.014 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:57:40.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:57:45.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:57:50.013 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:57:55.013 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:58:00.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:58:05.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:58:10.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:58:15.001 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:58:20.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:58:25.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:58:30.015 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:58:35.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:58:40.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:58:45.003 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:58:50.003 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:58:55.015 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:59:00.003 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:59:05.001 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:59:10.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:59:15.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:59:20.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:59:25.011 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:59:30.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:59:35.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:59:40.014 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:59:45.001 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:59:50.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.22:59:55.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.23:00:00.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.23:00:05.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.23:00:10.013 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.23:00:15.003 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.23:00:16.113 [http-nio-8091-exec-3] INFO  RaffleController       - 抽奖装配策略开始： strategyID: 100006
24-05-02.23:00:17.041 [http-nio-8091-exec-3] INFO  RaffleController       - 抽奖装配策略完成： strategyID: 100006, response: {"code":"0000","data":true,"info":"成功"}
24-05-02.23:00:20.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.23:00:25.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.23:00:28.449 [http-nio-8091-exec-10] INFO  RaffleController       - 抽奖装配策略开始： strategyID: 100006
24-05-02.23:00:28.488 [http-nio-8091-exec-10] INFO  RaffleController       - 抽奖装配策略完成： strategyID: 100006, response: {"code":"0000","data":[{"awardId":101,"awardTitle":"随机积分","sort":1},{"awardId":102,"awardTitle":"7等奖","sort":2},{"awardId":103,"awardTitle":"6等奖","sort":3},{"awardId":104,"awardTitle":"5等奖","sort":4},{"awardId":105,"awardTitle":"4等奖","sort":5},{"awardId":106,"awardSubtitle":"抽奖1次后解锁","awardTitle":"3等奖","sort":6},{"awardId":107,"awardSubtitle":"抽奖1次后解锁","awardTitle":"2等奖","sort":7},{"awardId":108,"awardSubtitle":"抽奖2次后解锁","awardTitle":"1等奖","sort":8}],"info":"成功"}
24-05-02.23:00:30.011 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.23:00:35.011 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.23:00:40.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.23:00:40.177 [http-nio-8091-exec-9] INFO  RaffleController       - 随机抽奖开始： strategyID: 100006
24-05-02.23:00:40.318 [http-nio-8091-exec-9] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userID: system strategyID: 100006 ruleModel: rule_default awardId: 107
24-05-02.23:00:40.318 [http-nio-8091-exec-9] INFO  AbstractRaffleStrategy - 抽奖策略计算-责任链 system 100006 107 rule_default
24-05-02.23:00:40.589 [http-nio-8091-exec-9] INFO  RuleLockLogicTreeNode  - 规则过滤-次数锁 userId:system strategyId:100006 awardId:107
24-05-02.23:00:40.589 [http-nio-8091-exec-9] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock_1 node:rule_lock code:0000
24-05-02.23:00:40.589 [http-nio-8091-exec-9] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100006 awardId:107
24-05-02.23:00:40.663 [http-nio-8091-exec-9] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId: system strategyId: 100006 awardId: 107
24-05-02.23:00:40.696 [http-nio-8091-exec-9] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock_1 node:rule_stock code:0001
24-05-02.23:00:40.696 [http-nio-8091-exec-9] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100006 107 null
24-05-02.23:00:40.803 [http-nio-8091-exec-9] INFO  RaffleController       - 随机抽奖完成： strategyID: 100006 response: {"code":"0000","data":{"awardId":107,"awardIndex":7},"info":"成功"}
24-05-02.23:00:43.226 [http-nio-8091-exec-1] INFO  RaffleController       - 随机抽奖开始： strategyID: 100006
24-05-02.23:00:43.367 [http-nio-8091-exec-1] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userID: system strategyID: 100006 ruleModel: rule_default awardId: 103
24-05-02.23:00:43.367 [http-nio-8091-exec-1] INFO  AbstractRaffleStrategy - 抽奖策略计算-责任链 system 100006 103 rule_default
24-05-02.23:00:43.647 [http-nio-8091-exec-1] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100006 awardId:103
24-05-02.23:00:43.716 [http-nio-8091-exec-1] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId: system strategyId: 100006 awardId: 103
24-05-02.23:00:43.749 [http-nio-8091-exec-1] INFO  DecisionTreeEngine     - 决策树引擎【规则树-兜底奖励】treeId:tree_luck_award node:rule_stock code:0001
24-05-02.23:00:43.749 [http-nio-8091-exec-1] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100006 103 null
24-05-02.23:00:43.872 [http-nio-8091-exec-1] INFO  RaffleController       - 随机抽奖完成： strategyID: 100006 response: {"code":"0000","data":{"awardId":103,"awardIndex":3},"info":"成功"}
24-05-02.23:00:44.610 [http-nio-8091-exec-5] INFO  RaffleController       - 随机抽奖开始： strategyID: 100006
24-05-02.23:00:44.748 [http-nio-8091-exec-5] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userID: system strategyID: 100006 ruleModel: rule_default awardId: 101
24-05-02.23:00:44.748 [http-nio-8091-exec-5] INFO  AbstractRaffleStrategy - 抽奖策略计算-责任链 system 100006 101 rule_default
24-05-02.23:00:44.865 [http-nio-8091-exec-5] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100006 awardId:101
24-05-02.23:00:44.932 [http-nio-8091-exec-5] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId: system strategyId: 100006 awardId: 101
24-05-02.23:00:44.965 [http-nio-8091-exec-5] INFO  DecisionTreeEngine     - 决策树引擎【规则树-兜底奖励】treeId:tree_luck_award node:rule_stock code:0001
24-05-02.23:00:44.965 [http-nio-8091-exec-5] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100006 101 null
24-05-02.23:00:45.014 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.23:00:45.050 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存 strategyId:100006 awardId:107
24-05-02.23:00:45.078 [http-nio-8091-exec-5] INFO  RaffleController       - 随机抽奖完成： strategyID: 100006 response: {"code":"0000","data":{"awardId":101,"awardIndex":1},"info":"成功"}
24-05-02.23:00:50.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.23:00:50.047 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存 strategyId:100006 awardId:103
24-05-02.23:00:55.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.23:00:55.047 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存 strategyId:100006 awardId:101
24-05-02.23:01:00.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.23:01:05.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.23:01:10.015 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.23:01:15.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.23:01:20.014 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.23:01:25.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.23:01:30.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.23:01:35.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.23:01:35.984 [http-nio-8091-exec-3] INFO  RaffleController       - 随机抽奖开始： strategyID: 100006
24-05-02.23:01:35.984 [http-nio-8091-exec-10] INFO  RaffleController       - 随机抽奖开始： strategyID: 100006
24-05-02.23:01:35.985 [http-nio-8091-exec-6] INFO  RaffleController       - 随机抽奖开始： strategyID: 100006
24-05-02.23:01:36.121 [http-nio-8091-exec-6] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userID: system strategyID: 100006 ruleModel: rule_default awardId: 103
24-05-02.23:01:36.121 [http-nio-8091-exec-6] INFO  AbstractRaffleStrategy - 抽奖策略计算-责任链 system 100006 103 rule_default
24-05-02.23:01:36.123 [http-nio-8091-exec-3] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userID: system strategyID: 100006 ruleModel: rule_default awardId: 107
24-05-02.23:01:36.123 [http-nio-8091-exec-3] INFO  AbstractRaffleStrategy - 抽奖策略计算-责任链 system 100006 107 rule_default
24-05-02.23:01:36.127 [http-nio-8091-exec-10] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userID: system strategyID: 100006 ruleModel: rule_default awardId: 102
24-05-02.23:01:36.127 [http-nio-8091-exec-10] INFO  AbstractRaffleStrategy - 抽奖策略计算-责任链 system 100006 102 rule_default
24-05-02.23:01:36.235 [http-nio-8091-exec-6] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100006 awardId:103
24-05-02.23:01:36.306 [http-nio-8091-exec-6] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId: system strategyId: 100006 awardId: 103
24-05-02.23:01:36.342 [http-nio-8091-exec-6] INFO  DecisionTreeEngine     - 决策树引擎【规则树-兜底奖励】treeId:tree_luck_award node:rule_stock code:0001
24-05-02.23:01:36.343 [http-nio-8091-exec-6] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100006 103 null
24-05-02.23:01:36.379 [http-nio-8091-exec-6] INFO  RaffleController       - 随机抽奖完成： strategyID: 100006 response: {"code":"0000","data":{"awardId":103,"awardIndex":3},"info":"成功"}
24-05-02.23:01:36.381 [http-nio-8091-exec-8] INFO  RaffleController       - 随机抽奖开始： strategyID: 100006
24-05-02.23:01:36.519 [http-nio-8091-exec-8] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userID: system strategyID: 100006 ruleModel: rule_default awardId: 102
24-05-02.23:01:36.519 [http-nio-8091-exec-8] INFO  AbstractRaffleStrategy - 抽奖策略计算-责任链 system 100006 102 rule_default
24-05-02.23:01:36.595 [http-nio-8091-exec-8] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100006 awardId:102
24-05-02.23:01:36.666 [http-nio-8091-exec-8] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId: system strategyId: 100006 awardId: 102
24-05-02.23:01:36.699 [http-nio-8091-exec-8] INFO  DecisionTreeEngine     - 决策树引擎【规则树-兜底奖励】treeId:tree_luck_award node:rule_stock code:0001
24-05-02.23:01:36.699 [http-nio-8091-exec-8] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100006 102 null
24-05-02.23:01:36.811 [http-nio-8091-exec-8] INFO  RaffleController       - 随机抽奖完成： strategyID: 100006 response: {"code":"0000","data":{"awardId":102,"awardIndex":2},"info":"成功"}
24-05-02.23:01:36.814 [http-nio-8091-exec-9] INFO  RaffleController       - 随机抽奖开始： strategyID: 100006
24-05-02.23:01:36.952 [http-nio-8091-exec-9] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userID: system strategyID: 100006 ruleModel: rule_default awardId: 108
24-05-02.23:01:36.952 [http-nio-8091-exec-9] INFO  AbstractRaffleStrategy - 抽奖策略计算-责任链 system 100006 108 rule_default
24-05-02.23:01:37.188 [http-nio-8091-exec-9] INFO  RuleLockLogicTreeNode  - 规则过滤-次数锁 userId:system strategyId:100006 awardId:108
24-05-02.23:01:37.188 [http-nio-8091-exec-9] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock_2 node:rule_lock code:0000
24-05-02.23:01:37.188 [http-nio-8091-exec-9] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100006 awardId:108
24-05-02.23:01:37.258 [http-nio-8091-exec-9] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId: system strategyId: 100006 awardId: 108
24-05-02.23:01:37.293 [http-nio-8091-exec-9] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock_2 node:rule_stock code:0001
24-05-02.23:01:37.293 [http-nio-8091-exec-9] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100006 108 null
24-05-02.23:01:37.404 [http-nio-8091-exec-9] INFO  RaffleController       - 随机抽奖完成： strategyID: 100006 response: {"code":"0000","data":{"awardId":108,"awardIndex":8},"info":"成功"}
24-05-02.23:01:37.406 [http-nio-8091-exec-7] INFO  RaffleController       - 随机抽奖开始： strategyID: 100006
24-05-02.23:01:37.545 [http-nio-8091-exec-7] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userID: system strategyID: 100006 ruleModel: rule_default awardId: 108
24-05-02.23:01:37.545 [http-nio-8091-exec-7] INFO  AbstractRaffleStrategy - 抽奖策略计算-责任链 system 100006 108 rule_default
24-05-02.23:01:37.619 [http-nio-8091-exec-7] INFO  RuleLockLogicTreeNode  - 规则过滤-次数锁 userId:system strategyId:100006 awardId:108
24-05-02.23:01:37.619 [http-nio-8091-exec-7] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock_2 node:rule_lock code:0000
24-05-02.23:01:37.619 [http-nio-8091-exec-7] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100006 awardId:108
24-05-02.23:01:37.690 [http-nio-8091-exec-7] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId: system strategyId: 100006 awardId: 108
24-05-02.23:01:37.724 [http-nio-8091-exec-7] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock_2 node:rule_stock code:0001
24-05-02.23:01:37.724 [http-nio-8091-exec-7] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100006 108 null
24-05-02.23:01:37.760 [http-nio-8091-exec-7] INFO  RaffleController       - 随机抽奖完成： strategyID: 100006 response: {"code":"0000","data":{"awardId":108,"awardIndex":8},"info":"成功"}
24-05-02.23:01:37.763 [http-nio-8091-exec-1] INFO  RaffleController       - 随机抽奖开始： strategyID: 100006
24-05-02.23:01:37.898 [http-nio-8091-exec-1] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userID: system strategyID: 100006 ruleModel: rule_default awardId: 102
24-05-02.23:01:37.899 [http-nio-8091-exec-1] INFO  AbstractRaffleStrategy - 抽奖策略计算-责任链 system 100006 102 rule_default
24-05-02.23:01:37.976 [http-nio-8091-exec-1] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100006 awardId:102
24-05-02.23:01:38.047 [http-nio-8091-exec-1] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId: system strategyId: 100006 awardId: 102
24-05-02.23:01:38.080 [http-nio-8091-exec-1] INFO  DecisionTreeEngine     - 决策树引擎【规则树-兜底奖励】treeId:tree_luck_award node:rule_stock code:0001
24-05-02.23:01:38.080 [http-nio-8091-exec-1] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100006 102 null
24-05-02.23:01:38.114 [http-nio-8091-exec-1] INFO  RaffleController       - 随机抽奖完成： strategyID: 100006 response: {"code":"0000","data":{"awardId":102,"awardIndex":2},"info":"成功"}
24-05-02.23:01:38.116 [http-nio-8091-exec-2] INFO  RaffleController       - 随机抽奖开始： strategyID: 100006
24-05-02.23:01:38.254 [http-nio-8091-exec-2] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userID: system strategyID: 100006 ruleModel: rule_default awardId: 105
24-05-02.23:01:38.254 [http-nio-8091-exec-2] INFO  AbstractRaffleStrategy - 抽奖策略计算-责任链 system 100006 105 rule_default
24-05-02.23:01:38.329 [http-nio-8091-exec-2] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100006 awardId:105
24-05-02.23:01:38.398 [http-nio-8091-exec-2] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId: system strategyId: 100006 awardId: 105
24-05-02.23:01:38.436 [http-nio-8091-exec-2] INFO  DecisionTreeEngine     - 决策树引擎【规则树-兜底奖励】treeId:tree_luck_award node:rule_stock code:0001
24-05-02.23:01:38.436 [http-nio-8091-exec-2] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100006 105 null
24-05-02.23:01:38.543 [http-nio-8091-exec-2] INFO  RaffleController       - 随机抽奖完成： strategyID: 100006 response: {"code":"0000","data":{"awardId":105,"awardIndex":5},"info":"成功"}
24-05-02.23:01:38.545 [http-nio-8091-exec-5] INFO  RaffleController       - 随机抽奖开始： strategyID: 100006
24-05-02.23:01:38.687 [http-nio-8091-exec-5] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userID: system strategyID: 100006 ruleModel: rule_default awardId: 104
24-05-02.23:01:38.687 [http-nio-8091-exec-5] INFO  AbstractRaffleStrategy - 抽奖策略计算-责任链 system 100006 104 rule_default
24-05-02.23:01:38.762 [http-nio-8091-exec-5] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100006 awardId:104
24-05-02.23:01:38.831 [http-nio-8091-exec-5] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId: system strategyId: 100006 awardId: 104
24-05-02.23:01:38.869 [http-nio-8091-exec-5] INFO  DecisionTreeEngine     - 决策树引擎【规则树-兜底奖励】treeId:tree_luck_award node:rule_stock code:0001
24-05-02.23:01:38.869 [http-nio-8091-exec-5] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100006 104 null
24-05-02.23:01:38.976 [http-nio-8091-exec-5] INFO  RaffleController       - 随机抽奖完成： strategyID: 100006 response: {"code":"0000","data":{"awardId":104,"awardIndex":4},"info":"成功"}
24-05-02.23:01:38.978 [http-nio-8091-exec-4] INFO  RaffleController       - 随机抽奖开始： strategyID: 100006
24-05-02.23:01:39.119 [http-nio-8091-exec-4] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userID: system strategyID: 100006 ruleModel: rule_default awardId: 108
24-05-02.23:01:39.119 [http-nio-8091-exec-4] INFO  AbstractRaffleStrategy - 抽奖策略计算-责任链 system 100006 108 rule_default
24-05-02.23:01:39.194 [http-nio-8091-exec-4] INFO  RuleLockLogicTreeNode  - 规则过滤-次数锁 userId:system strategyId:100006 awardId:108
24-05-02.23:01:39.195 [http-nio-8091-exec-4] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock_2 node:rule_lock code:0000
24-05-02.23:01:39.195 [http-nio-8091-exec-4] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100006 awardId:108
24-05-02.23:01:39.264 [http-nio-8091-exec-4] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId: system strategyId: 100006 awardId: 108
24-05-02.23:01:39.302 [http-nio-8091-exec-4] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock_2 node:rule_stock code:0001
24-05-02.23:01:39.302 [http-nio-8091-exec-4] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100006 108 null
24-05-02.23:01:39.334 [http-nio-8091-exec-4] INFO  RaffleController       - 随机抽奖完成： strategyID: 100006 response: {"code":"0000","data":{"awardId":108,"awardIndex":8},"info":"成功"}
24-05-02.23:01:40.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.23:01:40.043 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存 strategyId:100006 awardId:103
24-05-02.23:01:41.141 [http-nio-8091-exec-3] WARN  PoolBase               - HikariPool-1 - Failed to validate connection com.mysql.cj.jdbc.ConnectionImpl@87e4b5c (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
24-05-02.23:01:41.141 [http-nio-8091-exec-10] WARN  PoolBase               - HikariPool-1 - Failed to validate connection com.mysql.cj.jdbc.ConnectionImpl@1b268a6a (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
24-05-02.23:01:41.258 [http-nio-8091-exec-3] INFO  RuleLockLogicTreeNode  - 规则过滤-次数锁 userId:system strategyId:100006 awardId:107
24-05-02.23:01:41.259 [http-nio-8091-exec-3] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock_1 node:rule_lock code:0000
24-05-02.23:01:41.259 [http-nio-8091-exec-3] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100006 awardId:107
24-05-02.23:01:41.330 [http-nio-8091-exec-3] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId: system strategyId: 100006 awardId: 107
24-05-02.23:01:41.362 [http-nio-8091-exec-3] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock_1 node:rule_stock code:0001
24-05-02.23:01:41.362 [http-nio-8091-exec-3] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100006 107 null
24-05-02.23:01:41.397 [http-nio-8091-exec-3] INFO  RaffleController       - 随机抽奖完成： strategyID: 100006 response: {"code":"0000","data":{"awardId":107,"awardIndex":7},"info":"成功"}
24-05-02.23:01:45.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.23:01:45.042 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存 strategyId:100006 awardId:102
24-05-02.23:01:46.149 [http-nio-8091-exec-10] WARN  PoolBase               - HikariPool-1 - Failed to validate connection com.mysql.cj.jdbc.ConnectionImpl@5d39f72b (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
24-05-02.23:01:46.265 [http-nio-8091-exec-10] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100006 awardId:102
24-05-02.23:01:46.336 [http-nio-8091-exec-10] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId: system strategyId: 100006 awardId: 102
24-05-02.23:01:46.369 [http-nio-8091-exec-10] INFO  DecisionTreeEngine     - 决策树引擎【规则树-兜底奖励】treeId:tree_luck_award node:rule_stock code:0001
24-05-02.23:01:46.369 [http-nio-8091-exec-10] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100006 102 null
24-05-02.23:01:46.403 [http-nio-8091-exec-10] INFO  RaffleController       - 随机抽奖完成： strategyID: 100006 response: {"code":"0000","data":{"awardId":102,"awardIndex":2},"info":"成功"}
24-05-02.23:01:46.902 [http-nio-8091-exec-8] INFO  RaffleController       - 随机抽奖开始： strategyID: 100006
24-05-02.23:01:46.903 [http-nio-8091-exec-9] INFO  RaffleController       - 随机抽奖开始： strategyID: 100006
24-05-02.23:01:46.903 [http-nio-8091-exec-6] INFO  RaffleController       - 随机抽奖开始： strategyID: 100006
24-05-02.23:01:47.038 [http-nio-8091-exec-6] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userID: system strategyID: 100006 ruleModel: rule_default awardId: 105
24-05-02.23:01:47.038 [http-nio-8091-exec-6] INFO  AbstractRaffleStrategy - 抽奖策略计算-责任链 system 100006 105 rule_default
24-05-02.23:01:47.040 [http-nio-8091-exec-9] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userID: system strategyID: 100006 ruleModel: rule_default awardId: 105
24-05-02.23:01:47.040 [http-nio-8091-exec-9] INFO  AbstractRaffleStrategy - 抽奖策略计算-责任链 system 100006 105 rule_default
24-05-02.23:01:47.044 [http-nio-8091-exec-8] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userID: system strategyID: 100006 ruleModel: rule_default awardId: 108
24-05-02.23:01:47.044 [http-nio-8091-exec-8] INFO  AbstractRaffleStrategy - 抽奖策略计算-责任链 system 100006 108 rule_default
24-05-02.23:01:47.152 [http-nio-8091-exec-6] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100006 awardId:105
24-05-02.23:01:47.224 [http-nio-8091-exec-6] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId: system strategyId: 100006 awardId: 105
24-05-02.23:01:47.258 [http-nio-8091-exec-6] INFO  DecisionTreeEngine     - 决策树引擎【规则树-兜底奖励】treeId:tree_luck_award node:rule_stock code:0001
24-05-02.23:01:47.258 [http-nio-8091-exec-6] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100006 105 null
24-05-02.23:01:47.294 [http-nio-8091-exec-6] INFO  RaffleController       - 随机抽奖完成： strategyID: 100006 response: {"code":"0000","data":{"awardId":105,"awardIndex":5},"info":"成功"}
24-05-02.23:01:47.296 [http-nio-8091-exec-7] INFO  RaffleController       - 随机抽奖开始： strategyID: 100006
24-05-02.23:01:47.434 [http-nio-8091-exec-7] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userID: system strategyID: 100006 ruleModel: rule_default awardId: 102
24-05-02.23:01:47.434 [http-nio-8091-exec-7] INFO  AbstractRaffleStrategy - 抽奖策略计算-责任链 system 100006 102 rule_default
24-05-02.23:01:47.511 [http-nio-8091-exec-7] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100006 awardId:102
24-05-02.23:01:47.582 [http-nio-8091-exec-7] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId: system strategyId: 100006 awardId: 102
24-05-02.23:01:47.616 [http-nio-8091-exec-7] INFO  DecisionTreeEngine     - 决策树引擎【规则树-兜底奖励】treeId:tree_luck_award node:rule_stock code:0001
24-05-02.23:01:47.616 [http-nio-8091-exec-7] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100006 102 null
24-05-02.23:01:47.649 [http-nio-8091-exec-7] INFO  RaffleController       - 随机抽奖完成： strategyID: 100006 response: {"code":"0000","data":{"awardId":102,"awardIndex":2},"info":"成功"}
24-05-02.23:01:47.651 [http-nio-8091-exec-1] INFO  RaffleController       - 随机抽奖开始： strategyID: 100006
24-05-02.23:01:47.793 [http-nio-8091-exec-1] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userID: system strategyID: 100006 ruleModel: rule_default awardId: 102
24-05-02.23:01:47.793 [http-nio-8091-exec-1] INFO  AbstractRaffleStrategy - 抽奖策略计算-责任链 system 100006 102 rule_default
24-05-02.23:01:47.868 [http-nio-8091-exec-1] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100006 awardId:102
24-05-02.23:01:47.936 [http-nio-8091-exec-1] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId: system strategyId: 100006 awardId: 102
24-05-02.23:01:47.974 [http-nio-8091-exec-1] INFO  DecisionTreeEngine     - 决策树引擎【规则树-兜底奖励】treeId:tree_luck_award node:rule_stock code:0001
24-05-02.23:01:47.974 [http-nio-8091-exec-1] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100006 102 null
24-05-02.23:01:48.008 [http-nio-8091-exec-1] INFO  RaffleController       - 随机抽奖完成： strategyID: 100006 response: {"code":"0000","data":{"awardId":102,"awardIndex":2},"info":"成功"}
24-05-02.23:01:48.010 [http-nio-8091-exec-2] INFO  RaffleController       - 随机抽奖开始： strategyID: 100006
24-05-02.23:01:48.149 [http-nio-8091-exec-2] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userID: system strategyID: 100006 ruleModel: rule_default awardId: 102
24-05-02.23:01:48.149 [http-nio-8091-exec-2] INFO  AbstractRaffleStrategy - 抽奖策略计算-责任链 system 100006 102 rule_default
24-05-02.23:01:48.224 [http-nio-8091-exec-2] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100006 awardId:102
24-05-02.23:01:48.293 [http-nio-8091-exec-2] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId: system strategyId: 100006 awardId: 102
24-05-02.23:01:48.325 [http-nio-8091-exec-2] INFO  DecisionTreeEngine     - 决策树引擎【规则树-兜底奖励】treeId:tree_luck_award node:rule_stock code:0001
24-05-02.23:01:48.325 [http-nio-8091-exec-2] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100006 102 null
24-05-02.23:01:48.364 [http-nio-8091-exec-2] INFO  RaffleController       - 随机抽奖完成： strategyID: 100006 response: {"code":"0000","data":{"awardId":102,"awardIndex":2},"info":"成功"}
24-05-02.23:01:48.366 [http-nio-8091-exec-5] INFO  RaffleController       - 随机抽奖开始： strategyID: 100006
24-05-02.23:01:48.502 [http-nio-8091-exec-5] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userID: system strategyID: 100006 ruleModel: rule_default awardId: 101
24-05-02.23:01:48.502 [http-nio-8091-exec-5] INFO  AbstractRaffleStrategy - 抽奖策略计算-责任链 system 100006 101 rule_default
24-05-02.23:01:48.581 [http-nio-8091-exec-5] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100006 awardId:101
24-05-02.23:01:48.648 [http-nio-8091-exec-5] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId: system strategyId: 100006 awardId: 101
24-05-02.23:01:48.684 [http-nio-8091-exec-5] INFO  DecisionTreeEngine     - 决策树引擎【规则树-兜底奖励】treeId:tree_luck_award node:rule_stock code:0001
24-05-02.23:01:48.684 [http-nio-8091-exec-5] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100006 101 null
24-05-02.23:01:48.717 [http-nio-8091-exec-5] INFO  RaffleController       - 随机抽奖完成： strategyID: 100006 response: {"code":"0000","data":{"awardId":101,"awardIndex":1},"info":"成功"}
24-05-02.23:01:48.719 [http-nio-8091-exec-4] INFO  RaffleController       - 随机抽奖开始： strategyID: 100006
24-05-02.23:01:48.860 [http-nio-8091-exec-4] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userID: system strategyID: 100006 ruleModel: rule_default awardId: 107
24-05-02.23:01:48.860 [http-nio-8091-exec-4] INFO  AbstractRaffleStrategy - 抽奖策略计算-责任链 system 100006 107 rule_default
24-05-02.23:01:48.932 [http-nio-8091-exec-4] INFO  RuleLockLogicTreeNode  - 规则过滤-次数锁 userId:system strategyId:100006 awardId:107
24-05-02.23:01:48.932 [http-nio-8091-exec-4] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock_1 node:rule_lock code:0000
24-05-02.23:01:48.932 [http-nio-8091-exec-4] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100006 awardId:107
24-05-02.23:01:49.004 [http-nio-8091-exec-4] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId: system strategyId: 100006 awardId: 107
24-05-02.23:01:49.038 [http-nio-8091-exec-4] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock_1 node:rule_stock code:0001
24-05-02.23:01:49.038 [http-nio-8091-exec-4] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100006 107 null
24-05-02.23:01:49.075 [http-nio-8091-exec-4] INFO  RaffleController       - 随机抽奖完成： strategyID: 100006 response: {"code":"0000","data":{"awardId":107,"awardIndex":7},"info":"成功"}
24-05-02.23:01:49.077 [http-nio-8091-exec-3] INFO  RaffleController       - 随机抽奖开始： strategyID: 100006
24-05-02.23:01:49.215 [http-nio-8091-exec-3] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userID: system strategyID: 100006 ruleModel: rule_default awardId: 103
24-05-02.23:01:49.215 [http-nio-8091-exec-3] INFO  AbstractRaffleStrategy - 抽奖策略计算-责任链 system 100006 103 rule_default
24-05-02.23:01:49.291 [http-nio-8091-exec-3] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100006 awardId:103
24-05-02.23:01:49.362 [http-nio-8091-exec-3] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId: system strategyId: 100006 awardId: 103
24-05-02.23:01:49.395 [http-nio-8091-exec-3] INFO  DecisionTreeEngine     - 决策树引擎【规则树-兜底奖励】treeId:tree_luck_award node:rule_stock code:0001
24-05-02.23:01:49.395 [http-nio-8091-exec-3] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100006 103 null
24-05-02.23:01:49.431 [http-nio-8091-exec-3] INFO  RaffleController       - 随机抽奖完成： strategyID: 100006 response: {"code":"0000","data":{"awardId":103,"awardIndex":3},"info":"成功"}
24-05-02.23:01:49.432 [http-nio-8091-exec-10] INFO  RaffleController       - 随机抽奖开始： strategyID: 100006
24-05-02.23:01:49.571 [http-nio-8091-exec-10] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userID: system strategyID: 100006 ruleModel: rule_default awardId: 106
24-05-02.23:01:49.571 [http-nio-8091-exec-10] INFO  AbstractRaffleStrategy - 抽奖策略计算-责任链 system 100006 106 rule_default
24-05-02.23:01:49.648 [http-nio-8091-exec-10] INFO  RuleLockLogicTreeNode  - 规则过滤-次数锁 userId:system strategyId:100006 awardId:106
24-05-02.23:01:49.648 [http-nio-8091-exec-10] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock_1 node:rule_lock code:0000
24-05-02.23:01:49.648 [http-nio-8091-exec-10] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100006 awardId:106
24-05-02.23:01:49.719 [http-nio-8091-exec-10] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId: system strategyId: 100006 awardId: 106
24-05-02.23:01:49.754 [http-nio-8091-exec-10] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock_1 node:rule_stock code:0001
24-05-02.23:01:49.754 [http-nio-8091-exec-10] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100006 106 null
24-05-02.23:01:49.862 [http-nio-8091-exec-10] INFO  RaffleController       - 随机抽奖完成： strategyID: 100006 response: {"code":"0000","data":{"awardId":106,"awardIndex":6},"info":"成功"}
24-05-02.23:01:49.865 [http-nio-8091-exec-6] INFO  RaffleController       - 随机抽奖开始： strategyID: 100006
24-05-02.23:01:50.001 [http-nio-8091-exec-6] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userID: system strategyID: 100006 ruleModel: rule_default awardId: 106
24-05-02.23:01:50.001 [http-nio-8091-exec-6] INFO  AbstractRaffleStrategy - 抽奖策略计算-责任链 system 100006 106 rule_default
24-05-02.23:01:50.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.23:01:50.043 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存 strategyId:100006 awardId:108
24-05-02.23:01:50.074 [http-nio-8091-exec-6] INFO  RuleLockLogicTreeNode  - 规则过滤-次数锁 userId:system strategyId:100006 awardId:106
24-05-02.23:01:50.074 [http-nio-8091-exec-6] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock_1 node:rule_lock code:0000
24-05-02.23:01:50.074 [http-nio-8091-exec-6] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100006 awardId:106
24-05-02.23:01:50.146 [http-nio-8091-exec-6] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId: system strategyId: 100006 awardId: 106
24-05-02.23:01:50.180 [http-nio-8091-exec-6] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock_1 node:rule_stock code:0001
24-05-02.23:01:50.180 [http-nio-8091-exec-6] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100006 106 null
24-05-02.23:01:50.215 [http-nio-8091-exec-6] INFO  RaffleController       - 随机抽奖完成： strategyID: 100006 response: {"code":"0000","data":{"awardId":106,"awardIndex":6},"info":"成功"}
24-05-02.23:01:51.649 [http-nio-8091-exec-7] INFO  RaffleController       - 随机抽奖开始： strategyID: 100006
24-05-02.23:01:51.649 [http-nio-8091-exec-1] INFO  RaffleController       - 随机抽奖开始： strategyID: 100006
24-05-02.23:01:51.649 [http-nio-8091-exec-2] INFO  RaffleController       - 随机抽奖开始： strategyID: 100006
24-05-02.23:01:51.789 [http-nio-8091-exec-2] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userID: system strategyID: 100006 ruleModel: rule_default awardId: 104
24-05-02.23:01:51.789 [http-nio-8091-exec-2] INFO  AbstractRaffleStrategy - 抽奖策略计算-责任链 system 100006 104 rule_default
24-05-02.23:01:51.793 [http-nio-8091-exec-7] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userID: system strategyID: 100006 ruleModel: rule_default awardId: 102
24-05-02.23:01:51.793 [http-nio-8091-exec-1] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userID: system strategyID: 100006 ruleModel: rule_default awardId: 106
24-05-02.23:01:51.793 [http-nio-8091-exec-1] INFO  AbstractRaffleStrategy - 抽奖策略计算-责任链 system 100006 106 rule_default
24-05-02.23:01:51.793 [http-nio-8091-exec-7] INFO  AbstractRaffleStrategy - 抽奖策略计算-责任链 system 100006 102 rule_default
24-05-02.23:01:51.908 [http-nio-8091-exec-2] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100006 awardId:104
24-05-02.23:01:51.975 [http-nio-8091-exec-2] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId: system strategyId: 100006 awardId: 104
24-05-02.23:01:52.008 [http-nio-8091-exec-2] INFO  DecisionTreeEngine     - 决策树引擎【规则树-兜底奖励】treeId:tree_luck_award node:rule_stock code:0001
24-05-02.23:01:52.008 [http-nio-8091-exec-2] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100006 104 null
24-05-02.23:01:52.042 [http-nio-8091-exec-2] INFO  RaffleController       - 随机抽奖完成： strategyID: 100006 response: {"code":"0000","data":{"awardId":104,"awardIndex":4},"info":"成功"}
24-05-02.23:01:52.043 [http-nio-8091-exec-5] INFO  RaffleController       - 随机抽奖开始： strategyID: 100006
24-05-02.23:01:52.049 [http-nio-8091-exec-8] WARN  PoolBase               - HikariPool-1 - Failed to validate connection com.mysql.cj.jdbc.ConnectionImpl@67a331dc (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
24-05-02.23:01:52.049 [http-nio-8091-exec-9] WARN  PoolBase               - HikariPool-1 - Failed to validate connection com.mysql.cj.jdbc.ConnectionImpl@63da5fe1 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
24-05-02.23:01:52.124 [http-nio-8091-exec-9] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100006 awardId:105
24-05-02.23:01:52.190 [http-nio-8091-exec-5] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userID: system strategyID: 100006 ruleModel: rule_default awardId: 108
24-05-02.23:01:52.190 [http-nio-8091-exec-5] INFO  AbstractRaffleStrategy - 抽奖策略计算-责任链 system 100006 108 rule_default
24-05-02.23:01:52.193 [http-nio-8091-exec-9] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId: system strategyId: 100006 awardId: 105
24-05-02.23:01:52.225 [http-nio-8091-exec-9] INFO  DecisionTreeEngine     - 决策树引擎【规则树-兜底奖励】treeId:tree_luck_award node:rule_stock code:0001
24-05-02.23:01:52.225 [http-nio-8091-exec-9] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100006 105 null
24-05-02.23:01:52.259 [http-nio-8091-exec-9] INFO  RaffleController       - 随机抽奖完成： strategyID: 100006 response: {"code":"0000","data":{"awardId":105,"awardIndex":5},"info":"成功"}
24-05-02.23:01:52.265 [http-nio-8091-exec-5] INFO  RuleLockLogicTreeNode  - 规则过滤-次数锁 userId:system strategyId:100006 awardId:108
24-05-02.23:01:52.265 [http-nio-8091-exec-5] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock_2 node:rule_lock code:0000
24-05-02.23:01:52.265 [http-nio-8091-exec-5] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100006 awardId:108
24-05-02.23:01:52.338 [http-nio-8091-exec-5] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId: system strategyId: 100006 awardId: 108
24-05-02.23:01:52.371 [http-nio-8091-exec-5] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock_2 node:rule_stock code:0001
24-05-02.23:01:52.371 [http-nio-8091-exec-5] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100006 108 null
24-05-02.23:01:52.405 [http-nio-8091-exec-5] INFO  RaffleController       - 随机抽奖完成： strategyID: 100006 response: {"code":"0000","data":{"awardId":108,"awardIndex":8},"info":"成功"}
24-05-02.23:01:52.407 [http-nio-8091-exec-4] INFO  RaffleController       - 随机抽奖开始： strategyID: 100006
24-05-02.23:01:52.543 [http-nio-8091-exec-4] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userID: system strategyID: 100006 ruleModel: rule_default awardId: 108
24-05-02.23:01:52.543 [http-nio-8091-exec-4] INFO  AbstractRaffleStrategy - 抽奖策略计算-责任链 system 100006 108 rule_default
24-05-02.23:01:52.617 [http-nio-8091-exec-4] INFO  RuleLockLogicTreeNode  - 规则过滤-次数锁 userId:system strategyId:100006 awardId:108
24-05-02.23:01:52.617 [http-nio-8091-exec-4] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock_2 node:rule_lock code:0000
24-05-02.23:01:52.617 [http-nio-8091-exec-4] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100006 awardId:108
24-05-02.23:01:52.690 [http-nio-8091-exec-4] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId: system strategyId: 100006 awardId: 108
24-05-02.23:01:52.723 [http-nio-8091-exec-4] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock_2 node:rule_stock code:0001
24-05-02.23:01:52.723 [http-nio-8091-exec-4] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100006 108 null
24-05-02.23:01:52.756 [http-nio-8091-exec-4] INFO  RaffleController       - 随机抽奖完成： strategyID: 100006 response: {"code":"0000","data":{"awardId":108,"awardIndex":8},"info":"成功"}
24-05-02.23:01:52.758 [http-nio-8091-exec-3] INFO  RaffleController       - 随机抽奖开始： strategyID: 100006
24-05-02.23:01:52.898 [http-nio-8091-exec-3] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userID: system strategyID: 100006 ruleModel: rule_default awardId: 104
24-05-02.23:01:52.898 [http-nio-8091-exec-3] INFO  AbstractRaffleStrategy - 抽奖策略计算-责任链 system 100006 104 rule_default
24-05-02.23:01:52.971 [http-nio-8091-exec-3] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100006 awardId:104
24-05-02.23:01:53.046 [http-nio-8091-exec-3] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId: system strategyId: 100006 awardId: 104
24-05-02.23:01:53.082 [http-nio-8091-exec-3] INFO  DecisionTreeEngine     - 决策树引擎【规则树-兜底奖励】treeId:tree_luck_award node:rule_stock code:0001
24-05-02.23:01:53.082 [http-nio-8091-exec-3] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100006 104 null
24-05-02.23:01:53.116 [http-nio-8091-exec-3] INFO  RaffleController       - 随机抽奖完成： strategyID: 100006 response: {"code":"0000","data":{"awardId":104,"awardIndex":4},"info":"成功"}
24-05-02.23:01:53.118 [http-nio-8091-exec-10] INFO  RaffleController       - 随机抽奖开始： strategyID: 100006
24-05-02.23:01:53.258 [http-nio-8091-exec-10] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userID: system strategyID: 100006 ruleModel: rule_default awardId: 106
24-05-02.23:01:53.258 [http-nio-8091-exec-10] INFO  AbstractRaffleStrategy - 抽奖策略计算-责任链 system 100006 106 rule_default
24-05-02.23:01:53.332 [http-nio-8091-exec-10] INFO  RuleLockLogicTreeNode  - 规则过滤-次数锁 userId:system strategyId:100006 awardId:106
24-05-02.23:01:53.332 [http-nio-8091-exec-10] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock_1 node:rule_lock code:0000
24-05-02.23:01:53.332 [http-nio-8091-exec-10] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100006 awardId:106
24-05-02.23:01:53.406 [http-nio-8091-exec-10] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId: system strategyId: 100006 awardId: 106
24-05-02.23:01:53.438 [http-nio-8091-exec-10] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock_1 node:rule_stock code:0001
24-05-02.23:01:53.438 [http-nio-8091-exec-10] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100006 106 null
24-05-02.23:01:53.472 [http-nio-8091-exec-10] INFO  RaffleController       - 随机抽奖完成： strategyID: 100006 response: {"code":"0000","data":{"awardId":106,"awardIndex":6},"info":"成功"}
24-05-02.23:01:53.474 [http-nio-8091-exec-6] INFO  RaffleController       - 随机抽奖开始： strategyID: 100006
24-05-02.23:01:53.613 [http-nio-8091-exec-6] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userID: system strategyID: 100006 ruleModel: rule_default awardId: 104
24-05-02.23:01:53.613 [http-nio-8091-exec-6] INFO  AbstractRaffleStrategy - 抽奖策略计算-责任链 system 100006 104 rule_default
24-05-02.23:01:53.688 [http-nio-8091-exec-6] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100006 awardId:104
24-05-02.23:01:53.759 [http-nio-8091-exec-6] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId: system strategyId: 100006 awardId: 104
24-05-02.23:01:53.794 [http-nio-8091-exec-6] INFO  DecisionTreeEngine     - 决策树引擎【规则树-兜底奖励】treeId:tree_luck_award node:rule_stock code:0001
24-05-02.23:01:53.794 [http-nio-8091-exec-6] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100006 104 null
24-05-02.23:01:53.827 [http-nio-8091-exec-6] INFO  RaffleController       - 随机抽奖完成： strategyID: 100006 response: {"code":"0000","data":{"awardId":104,"awardIndex":4},"info":"成功"}
24-05-02.23:01:53.828 [http-nio-8091-exec-2] INFO  RaffleController       - 随机抽奖开始： strategyID: 100006
24-05-02.23:01:53.971 [http-nio-8091-exec-2] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userID: system strategyID: 100006 ruleModel: rule_default awardId: 101
24-05-02.23:01:53.971 [http-nio-8091-exec-2] INFO  AbstractRaffleStrategy - 抽奖策略计算-责任链 system 100006 101 rule_default
24-05-02.23:01:54.044 [http-nio-8091-exec-2] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100006 awardId:101
24-05-02.23:01:54.115 [http-nio-8091-exec-2] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId: system strategyId: 100006 awardId: 101
24-05-02.23:01:54.154 [http-nio-8091-exec-2] INFO  DecisionTreeEngine     - 决策树引擎【规则树-兜底奖励】treeId:tree_luck_award node:rule_stock code:0001
24-05-02.23:01:54.154 [http-nio-8091-exec-2] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100006 101 null
24-05-02.23:01:54.190 [http-nio-8091-exec-2] INFO  RaffleController       - 随机抽奖完成： strategyID: 100006 response: {"code":"0000","data":{"awardId":101,"awardIndex":1},"info":"成功"}
24-05-02.23:01:54.192 [http-nio-8091-exec-9] INFO  RaffleController       - 随机抽奖开始： strategyID: 100006
24-05-02.23:01:54.328 [http-nio-8091-exec-9] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userID: system strategyID: 100006 ruleModel: rule_default awardId: 107
24-05-02.23:01:54.328 [http-nio-8091-exec-9] INFO  AbstractRaffleStrategy - 抽奖策略计算-责任链 system 100006 107 rule_default
24-05-02.23:01:54.405 [http-nio-8091-exec-9] INFO  RuleLockLogicTreeNode  - 规则过滤-次数锁 userId:system strategyId:100006 awardId:107
24-05-02.23:01:54.405 [http-nio-8091-exec-9] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock_1 node:rule_lock code:0000
24-05-02.23:01:54.405 [http-nio-8091-exec-9] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100006 awardId:107
24-05-02.23:01:54.472 [http-nio-8091-exec-9] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId: system strategyId: 100006 awardId: 107
24-05-02.23:01:54.505 [http-nio-8091-exec-9] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock_1 node:rule_stock code:0001
24-05-02.23:01:54.505 [http-nio-8091-exec-9] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100006 107 null
24-05-02.23:01:54.543 [http-nio-8091-exec-9] INFO  RaffleController       - 随机抽奖完成： strategyID: 100006 response: {"code":"0000","data":{"awardId":107,"awardIndex":7},"info":"成功"}
24-05-02.23:01:54.544 [http-nio-8091-exec-5] INFO  RaffleController       - 随机抽奖开始： strategyID: 100006
24-05-02.23:01:54.681 [http-nio-8091-exec-5] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userID: system strategyID: 100006 ruleModel: rule_default awardId: 104
24-05-02.23:01:54.681 [http-nio-8091-exec-5] INFO  AbstractRaffleStrategy - 抽奖策略计算-责任链 system 100006 104 rule_default
24-05-02.23:01:54.760 [http-nio-8091-exec-5] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100006 awardId:104
24-05-02.23:01:54.828 [http-nio-8091-exec-5] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId: system strategyId: 100006 awardId: 104
24-05-02.23:01:54.863 [http-nio-8091-exec-5] INFO  DecisionTreeEngine     - 决策树引擎【规则树-兜底奖励】treeId:tree_luck_award node:rule_stock code:0001
24-05-02.23:01:54.863 [http-nio-8091-exec-5] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100006 104 null
24-05-02.23:01:54.897 [http-nio-8091-exec-5] INFO  RaffleController       - 随机抽奖完成： strategyID: 100006 response: {"code":"0000","data":{"awardId":104,"awardIndex":4},"info":"成功"}
24-05-02.23:01:55.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.23:01:55.046 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存 strategyId:100006 awardId:108
24-05-02.23:01:56.805 [http-nio-8091-exec-7] WARN  PoolBase               - HikariPool-1 - Failed to validate connection com.mysql.cj.jdbc.ConnectionImpl@3016cfe6 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
24-05-02.23:01:56.805 [http-nio-8091-exec-1] WARN  PoolBase               - HikariPool-1 - Failed to validate connection com.mysql.cj.jdbc.ConnectionImpl@5941cdce (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
24-05-02.23:01:56.922 [http-nio-8091-exec-1] INFO  RuleLockLogicTreeNode  - 规则过滤-次数锁 userId:system strategyId:100006 awardId:106
24-05-02.23:01:56.922 [http-nio-8091-exec-1] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock_1 node:rule_lock code:0000
24-05-02.23:01:56.922 [http-nio-8091-exec-1] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100006 awardId:106
24-05-02.23:01:56.993 [http-nio-8091-exec-1] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId: system strategyId: 100006 awardId: 106
24-05-02.23:01:57.029 [http-nio-8091-exec-1] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock_1 node:rule_stock code:0001
24-05-02.23:01:57.029 [http-nio-8091-exec-1] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100006 106 null
24-05-02.23:01:57.060 [http-nio-8091-exec-8] WARN  PoolBase               - HikariPool-1 - Failed to validate connection com.mysql.cj.jdbc.ConnectionImpl@4f28e7b0 (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
24-05-02.23:01:57.063 [http-nio-8091-exec-1] INFO  RaffleController       - 随机抽奖完成： strategyID: 100006 response: {"code":"0000","data":{"awardId":106,"awardIndex":6},"info":"成功"}
24-05-02.23:01:57.137 [http-nio-8091-exec-8] INFO  RuleLockLogicTreeNode  - 规则过滤-次数锁 userId:system strategyId:100006 awardId:108
24-05-02.23:01:57.137 [http-nio-8091-exec-8] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock_2 node:rule_lock code:0000
24-05-02.23:01:57.137 [http-nio-8091-exec-8] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100006 awardId:108
24-05-02.23:01:57.205 [http-nio-8091-exec-8] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId: system strategyId: 100006 awardId: 108
24-05-02.23:01:57.238 [http-nio-8091-exec-8] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock_2 node:rule_stock code:0001
24-05-02.23:01:57.238 [http-nio-8091-exec-8] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100006 108 null
24-05-02.23:01:57.274 [http-nio-8091-exec-8] INFO  RaffleController       - 随机抽奖完成： strategyID: 100006 response: {"code":"0000","data":{"awardId":108,"awardIndex":8},"info":"成功"}
24-05-02.23:02:00.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.23:02:00.043 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存 strategyId:100006 awardId:102
24-05-02.23:02:01.822 [http-nio-8091-exec-7] WARN  PoolBase               - HikariPool-1 - Failed to validate connection com.mysql.cj.jdbc.ConnectionImpl@2e93419e (No operations allowed after connection closed.). Possibly consider using a shorter maxLifetime value.
24-05-02.23:02:01.935 [http-nio-8091-exec-7] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100006 awardId:102
24-05-02.23:02:02.008 [http-nio-8091-exec-7] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId: system strategyId: 100006 awardId: 102
24-05-02.23:02:02.040 [http-nio-8091-exec-7] INFO  DecisionTreeEngine     - 决策树引擎【规则树-兜底奖励】treeId:tree_luck_award node:rule_stock code:0001
24-05-02.23:02:02.040 [http-nio-8091-exec-7] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100006 102 null
24-05-02.23:02:02.074 [http-nio-8091-exec-7] INFO  RaffleController       - 随机抽奖完成： strategyID: 100006 response: {"code":"0000","data":{"awardId":102,"awardIndex":2},"info":"成功"}
24-05-02.23:02:05.011 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.23:02:05.044 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存 strategyId:100006 awardId:105
24-05-02.23:02:10.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.23:02:10.045 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存 strategyId:100006 awardId:104
24-05-02.23:02:15.011 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.23:02:15.044 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存 strategyId:100006 awardId:108
24-05-02.23:02:20.015 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.23:02:20.050 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存 strategyId:100006 awardId:107
24-05-02.23:02:25.000 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.23:02:25.033 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存 strategyId:100006 awardId:102
24-05-02.23:02:30.003 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.23:02:30.041 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存 strategyId:100006 awardId:105
24-05-02.23:02:35.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.23:02:35.043 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存 strategyId:100006 awardId:102
24-05-02.23:02:40.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.23:02:40.037 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存 strategyId:100006 awardId:102
24-05-02.23:02:45.001 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.23:02:45.034 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存 strategyId:100006 awardId:102
24-05-02.23:02:50.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.23:02:50.043 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存 strategyId:100006 awardId:101
24-05-02.23:02:53.223 [SpringApplicationShutdownHook] INFO  HikariDataSource       - HikariPool-1 - Shutdown initiated...
24-05-02.23:02:53.229 [SpringApplicationShutdownHook] INFO  HikariDataSource       - HikariPool-1 - Shutdown completed.
24-05-02.23:02:59.459 [main            ] INFO  Application            - Starting Application using Java 1.8.0_231 on Trumen with PID 24968 (E:\Project\Job\xfg\big-market\big-market-app\target\classes started by Admin in E:\Project\Job\xfg\big-market)
24-05-02.23:02:59.460 [main            ] INFO  Application            - The following 1 profile is active: "dev"
24-05-02.23:03:00.457 [main            ] INFO  RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
24-05-02.23:03:00.460 [main            ] INFO  RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
24-05-02.23:03:00.492 [main            ] INFO  RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 16 ms. Found 0 Redis repository interfaces.
24-05-02.23:03:01.241 [main            ] INFO  TomcatWebServer        - Tomcat initialized with port(s): 8091 (http)
24-05-02.23:03:01.253 [main            ] INFO  Http11NioProtocol      - Initializing ProtocolHandler ["http-nio-8091"]
24-05-02.23:03:01.254 [main            ] INFO  StandardService        - Starting service [Tomcat]
24-05-02.23:03:01.254 [main            ] INFO  StandardEngine         - Starting Servlet engine: [Apache Tomcat/9.0.75]
24-05-02.23:03:01.471 [main            ] INFO  [/]                    - Initializing Spring embedded WebApplicationContext
24-05-02.23:03:01.471 [main            ] INFO  ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1956 ms
24-05-02.23:03:02.113 [main            ] INFO  Version                - Redisson 3.23.4
24-05-02.23:03:02.640 [redisson-netty-2-4] INFO  MasterPubSubConnectionPool - 1 connections initialized for 47.120.8.26/47.120.8.26:16379
24-05-02.23:03:02.933 [redisson-netty-2-13] INFO  MasterConnectionPool   - 5 connections initialized for 47.120.8.26/47.120.8.26:16379
24-05-02.23:03:03.917 [main            ] INFO  EndpointLinksResolver  - Exposing 1 endpoint(s) beneath base path '/actuator'
24-05-02.23:03:03.963 [main            ] INFO  Http11NioProtocol      - Starting ProtocolHandler ["http-nio-8091"]
24-05-02.23:03:03.980 [main            ] INFO  TomcatWebServer        - Tomcat started on port(s): 8091 (http) with context path ''
24-05-02.23:03:04.006 [main            ] INFO  Application            - Started Application in 5.1 seconds (JVM running for 6.445)
24-05-02.23:03:04.408 [RMI TCP Connection(1)-169.254.83.107] INFO  [/]                    - Initializing Spring DispatcherServlet 'dispatcherServlet'
24-05-02.23:03:04.408 [RMI TCP Connection(1)-169.254.83.107] INFO  DispatcherServlet      - Initializing Servlet 'dispatcherServlet'
24-05-02.23:03:04.411 [RMI TCP Connection(1)-169.254.83.107] INFO  DispatcherServlet      - Completed initialization in 3 ms
24-05-02.23:03:04.411 [RMI TCP Connection(2)-169.254.83.107] INFO  HikariDataSource       - HikariPool-1 - Starting...
24-05-02.23:03:05.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.23:03:05.150 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存 strategyId:100006 awardId:107
24-05-02.23:03:05.747 [RMI TCP Connection(2)-169.254.83.107] INFO  HikariDataSource       - HikariPool-1 - Start completed.
24-05-02.23:03:10.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.23:03:10.048 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存 strategyId:100006 awardId:103
24-05-02.23:03:15.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.23:03:15.045 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存 strategyId:100006 awardId:106
24-05-02.23:03:20.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.23:03:20.051 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存 strategyId:100006 awardId:106
24-05-02.23:03:25.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.23:03:25.051 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存 strategyId:100006 awardId:104
24-05-02.23:03:30.003 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.23:03:30.035 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存 strategyId:100006 awardId:105
24-05-02.23:03:35.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.23:03:35.045 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存 strategyId:100006 awardId:108
24-05-02.23:03:40.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.23:03:40.044 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存 strategyId:100006 awardId:108
24-05-02.23:03:45.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.23:03:45.052 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存 strategyId:100006 awardId:104
24-05-02.23:03:49.857 [http-nio-8091-exec-3] INFO  RaffleController       - 随机抽奖开始： strategyID: 100006
24-05-02.23:03:49.857 [http-nio-8091-exec-2] INFO  RaffleController       - 随机抽奖开始： strategyID: 100006
24-05-02.23:03:49.857 [http-nio-8091-exec-1] INFO  RaffleController       - 随机抽奖开始： strategyID: 100006
24-05-02.23:03:50.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.23:03:50.010 [http-nio-8091-exec-3] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userID: system strategyID: 100006 ruleModel: rule_default awardId: 105
24-05-02.23:03:50.010 [http-nio-8091-exec-1] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userID: system strategyID: 100006 ruleModel: rule_default awardId: 103
24-05-02.23:03:50.010 [http-nio-8091-exec-2] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userID: system strategyID: 100006 ruleModel: rule_default awardId: 108
24-05-02.23:03:50.011 [http-nio-8091-exec-2] INFO  AbstractRaffleStrategy - 抽奖策略计算-责任链 system 100006 108 rule_default
24-05-02.23:03:50.011 [http-nio-8091-exec-3] INFO  AbstractRaffleStrategy - 抽奖策略计算-责任链 system 100006 105 rule_default
24-05-02.23:03:50.011 [http-nio-8091-exec-1] INFO  AbstractRaffleStrategy - 抽奖策略计算-责任链 system 100006 103 rule_default
24-05-02.23:03:50.041 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存 strategyId:100006 awardId:106
24-05-02.23:03:50.136 [http-nio-8091-exec-2] INFO  RuleLockLogicTreeNode  - 规则过滤-次数锁 userId:system strategyId:100006 awardId:108
24-05-02.23:03:50.136 [http-nio-8091-exec-1] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100006 awardId:103
24-05-02.23:03:50.136 [http-nio-8091-exec-3] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100006 awardId:105
24-05-02.23:03:50.137 [http-nio-8091-exec-2] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock_2 node:rule_lock code:0000
24-05-02.23:03:50.138 [http-nio-8091-exec-2] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100006 awardId:108
24-05-02.23:03:50.208 [http-nio-8091-exec-1] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId: system strategyId: 100006 awardId: 103
24-05-02.23:03:50.208 [http-nio-8091-exec-3] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId: system strategyId: 100006 awardId: 105
24-05-02.23:03:50.210 [http-nio-8091-exec-2] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId: system strategyId: 100006 awardId: 108
24-05-02.23:03:50.297 [http-nio-8091-exec-2] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock_2 node:rule_stock code:0001
24-05-02.23:03:50.297 [http-nio-8091-exec-2] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100006 108 null
24-05-02.23:03:50.302 [http-nio-8091-exec-1] INFO  DecisionTreeEngine     - 决策树引擎【规则树-兜底奖励】treeId:tree_luck_award node:rule_stock code:0001
24-05-02.23:03:50.302 [http-nio-8091-exec-1] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100006 103 null
24-05-02.23:03:50.303 [http-nio-8091-exec-3] INFO  DecisionTreeEngine     - 决策树引擎【规则树-兜底奖励】treeId:tree_luck_award node:rule_stock code:0001
24-05-02.23:03:50.303 [http-nio-8091-exec-3] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100006 105 null
24-05-02.23:03:50.443 [http-nio-8091-exec-3] INFO  RaffleController       - 随机抽奖完成： strategyID: 100006 response: {"code":"0000","data":{"awardId":105,"awardIndex":5},"info":"成功"}
24-05-02.23:03:50.443 [http-nio-8091-exec-2] INFO  RaffleController       - 随机抽奖完成： strategyID: 100006 response: {"code":"0000","data":{"awardId":108,"awardIndex":8},"info":"成功"}
24-05-02.23:03:50.443 [http-nio-8091-exec-1] INFO  RaffleController       - 随机抽奖完成： strategyID: 100006 response: {"code":"0000","data":{"awardId":103,"awardIndex":3},"info":"成功"}
24-05-02.23:03:50.473 [http-nio-8091-exec-1] INFO  RaffleController       - 随机抽奖开始： strategyID: 100006
24-05-02.23:03:50.473 [http-nio-8091-exec-2] INFO  RaffleController       - 随机抽奖开始： strategyID: 100006
24-05-02.23:03:50.474 [http-nio-8091-exec-4] INFO  RaffleController       - 随机抽奖开始： strategyID: 100006
24-05-02.23:03:50.612 [http-nio-8091-exec-4] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userID: system strategyID: 100006 ruleModel: rule_default awardId: 101
24-05-02.23:03:50.612 [http-nio-8091-exec-4] INFO  AbstractRaffleStrategy - 抽奖策略计算-责任链 system 100006 101 rule_default
24-05-02.23:03:50.616 [http-nio-8091-exec-2] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userID: system strategyID: 100006 ruleModel: rule_default awardId: 104
24-05-02.23:03:50.616 [http-nio-8091-exec-2] INFO  AbstractRaffleStrategy - 抽奖策略计算-责任链 system 100006 104 rule_default
24-05-02.23:03:50.622 [http-nio-8091-exec-1] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userID: system strategyID: 100006 ruleModel: rule_default awardId: 107
24-05-02.23:03:50.622 [http-nio-8091-exec-1] INFO  AbstractRaffleStrategy - 抽奖策略计算-责任链 system 100006 107 rule_default
24-05-02.23:03:50.717 [http-nio-8091-exec-2] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100006 awardId:104
24-05-02.23:03:50.726 [http-nio-8091-exec-1] INFO  RuleLockLogicTreeNode  - 规则过滤-次数锁 userId:system strategyId:100006 awardId:107
24-05-02.23:03:50.726 [http-nio-8091-exec-1] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock_1 node:rule_lock code:0000
24-05-02.23:03:50.726 [http-nio-8091-exec-1] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100006 awardId:107
24-05-02.23:03:50.730 [http-nio-8091-exec-4] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100006 awardId:101
24-05-02.23:03:50.795 [http-nio-8091-exec-2] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId: system strategyId: 100006 awardId: 104
24-05-02.23:03:50.801 [http-nio-8091-exec-1] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId: system strategyId: 100006 awardId: 107
24-05-02.23:03:50.803 [http-nio-8091-exec-4] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId: system strategyId: 100006 awardId: 101
24-05-02.23:03:50.834 [http-nio-8091-exec-2] INFO  DecisionTreeEngine     - 决策树引擎【规则树-兜底奖励】treeId:tree_luck_award node:rule_stock code:0001
24-05-02.23:03:50.834 [http-nio-8091-exec-2] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100006 104 null
24-05-02.23:03:50.834 [http-nio-8091-exec-4] INFO  DecisionTreeEngine     - 决策树引擎【规则树-兜底奖励】treeId:tree_luck_award node:rule_stock code:0001
24-05-02.23:03:50.834 [http-nio-8091-exec-4] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100006 101 null
24-05-02.23:03:50.841 [http-nio-8091-exec-1] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock_1 node:rule_stock code:0001
24-05-02.23:03:50.841 [http-nio-8091-exec-1] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100006 107 null
24-05-02.23:03:50.869 [http-nio-8091-exec-4] INFO  RaffleController       - 随机抽奖完成： strategyID: 100006 response: {"code":"0000","data":{"awardId":101,"awardIndex":1},"info":"成功"}
24-05-02.23:03:50.872 [http-nio-8091-exec-2] INFO  RaffleController       - 随机抽奖完成： strategyID: 100006 response: {"code":"0000","data":{"awardId":104,"awardIndex":4},"info":"成功"}
24-05-02.23:03:50.872 [http-nio-8091-exec-5] INFO  RaffleController       - 随机抽奖开始： strategyID: 100006
24-05-02.23:03:50.874 [http-nio-8091-exec-6] INFO  RaffleController       - 随机抽奖开始： strategyID: 100006
24-05-02.23:03:50.879 [http-nio-8091-exec-1] INFO  RaffleController       - 随机抽奖完成： strategyID: 100006 response: {"code":"0000","data":{"awardId":107,"awardIndex":7},"info":"成功"}
24-05-02.23:03:50.881 [http-nio-8091-exec-7] INFO  RaffleController       - 随机抽奖开始： strategyID: 100006
24-05-02.23:03:51.013 [http-nio-8091-exec-5] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userID: system strategyID: 100006 ruleModel: rule_default awardId: 103
24-05-02.23:03:51.013 [http-nio-8091-exec-5] INFO  AbstractRaffleStrategy - 抽奖策略计算-责任链 system 100006 103 rule_default
24-05-02.23:03:51.022 [http-nio-8091-exec-7] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userID: system strategyID: 100006 ruleModel: rule_default awardId: 102
24-05-02.23:03:51.022 [http-nio-8091-exec-7] INFO  AbstractRaffleStrategy - 抽奖策略计算-责任链 system 100006 102 rule_default
24-05-02.23:03:51.028 [http-nio-8091-exec-6] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userID: system strategyID: 100006 ruleModel: rule_default awardId: 108
24-05-02.23:03:51.028 [http-nio-8091-exec-6] INFO  AbstractRaffleStrategy - 抽奖策略计算-责任链 system 100006 108 rule_default
24-05-02.23:03:51.088 [http-nio-8091-exec-5] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100006 awardId:103
24-05-02.23:03:51.091 [http-nio-8091-exec-6] INFO  RuleLockLogicTreeNode  - 规则过滤-次数锁 userId:system strategyId:100006 awardId:108
24-05-02.23:03:51.091 [http-nio-8091-exec-6] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock_2 node:rule_lock code:0000
24-05-02.23:03:51.091 [http-nio-8091-exec-6] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100006 awardId:108
24-05-02.23:03:51.096 [http-nio-8091-exec-7] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100006 awardId:102
24-05-02.23:03:51.158 [http-nio-8091-exec-5] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId: system strategyId: 100006 awardId: 103
24-05-02.23:03:51.166 [http-nio-8091-exec-6] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId: system strategyId: 100006 awardId: 108
24-05-02.23:03:51.169 [http-nio-8091-exec-7] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId: system strategyId: 100006 awardId: 102
24-05-02.23:03:51.198 [http-nio-8091-exec-5] INFO  DecisionTreeEngine     - 决策树引擎【规则树-兜底奖励】treeId:tree_luck_award node:rule_stock code:0001
24-05-02.23:03:51.198 [http-nio-8091-exec-5] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100006 103 null
24-05-02.23:03:51.200 [http-nio-8091-exec-7] INFO  DecisionTreeEngine     - 决策树引擎【规则树-兜底奖励】treeId:tree_luck_award node:rule_stock code:0001
24-05-02.23:03:51.200 [http-nio-8091-exec-7] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100006 102 null
24-05-02.23:03:51.201 [http-nio-8091-exec-6] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock_2 node:rule_stock code:0001
24-05-02.23:03:51.201 [http-nio-8091-exec-6] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100006 108 null
24-05-02.23:03:51.236 [http-nio-8091-exec-5] INFO  RaffleController       - 随机抽奖完成： strategyID: 100006 response: {"code":"0000","data":{"awardId":103,"awardIndex":3},"info":"成功"}
24-05-02.23:03:51.239 [http-nio-8091-exec-8] INFO  RaffleController       - 随机抽奖开始： strategyID: 100006
24-05-02.23:03:51.240 [http-nio-8091-exec-7] INFO  RaffleController       - 随机抽奖完成： strategyID: 100006 response: {"code":"0000","data":{"awardId":102,"awardIndex":2},"info":"成功"}
24-05-02.23:03:51.240 [http-nio-8091-exec-6] INFO  RaffleController       - 随机抽奖完成： strategyID: 100006 response: {"code":"0000","data":{"awardId":108,"awardIndex":8},"info":"成功"}
24-05-02.23:03:51.242 [http-nio-8091-exec-10] INFO  RaffleController       - 随机抽奖开始： strategyID: 100006
24-05-02.23:03:51.242 [http-nio-8091-exec-9] INFO  RaffleController       - 随机抽奖开始： strategyID: 100006
24-05-02.23:03:51.374 [http-nio-8091-exec-8] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userID: system strategyID: 100006 ruleModel: rule_default awardId: 103
24-05-02.23:03:51.375 [http-nio-8091-exec-8] INFO  AbstractRaffleStrategy - 抽奖策略计算-责任链 system 100006 103 rule_default
24-05-02.23:03:51.388 [http-nio-8091-exec-9] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userID: system strategyID: 100006 ruleModel: rule_default awardId: 107
24-05-02.23:03:51.388 [http-nio-8091-exec-9] INFO  AbstractRaffleStrategy - 抽奖策略计算-责任链 system 100006 107 rule_default
24-05-02.23:03:51.389 [http-nio-8091-exec-10] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userID: system strategyID: 100006 ruleModel: rule_default awardId: 108
24-05-02.23:03:51.389 [http-nio-8091-exec-10] INFO  AbstractRaffleStrategy - 抽奖策略计算-责任链 system 100006 108 rule_default
24-05-02.23:03:51.453 [http-nio-8091-exec-8] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100006 awardId:103
24-05-02.23:03:51.457 [http-nio-8091-exec-9] INFO  RuleLockLogicTreeNode  - 规则过滤-次数锁 userId:system strategyId:100006 awardId:107
24-05-02.23:03:51.457 [http-nio-8091-exec-9] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock_1 node:rule_lock code:0000
24-05-02.23:03:51.457 [http-nio-8091-exec-9] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100006 awardId:107
24-05-02.23:03:51.459 [http-nio-8091-exec-10] INFO  RuleLockLogicTreeNode  - 规则过滤-次数锁 userId:system strategyId:100006 awardId:108
24-05-02.23:03:51.459 [http-nio-8091-exec-10] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock_2 node:rule_lock code:0000
24-05-02.23:03:51.459 [http-nio-8091-exec-10] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100006 awardId:108
24-05-02.23:03:51.523 [http-nio-8091-exec-9] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId: system strategyId: 100006 awardId: 107
24-05-02.23:03:51.529 [http-nio-8091-exec-8] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId: system strategyId: 100006 awardId: 103
24-05-02.23:03:51.530 [http-nio-8091-exec-10] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId: system strategyId: 100006 awardId: 108
24-05-02.23:03:51.562 [http-nio-8091-exec-10] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock_2 node:rule_stock code:0001
24-05-02.23:03:51.562 [http-nio-8091-exec-10] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100006 108 null
24-05-02.23:03:51.563 [http-nio-8091-exec-9] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock_1 node:rule_stock code:0001
24-05-02.23:03:51.563 [http-nio-8091-exec-9] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100006 107 null
24-05-02.23:03:51.567 [http-nio-8091-exec-8] INFO  DecisionTreeEngine     - 决策树引擎【规则树-兜底奖励】treeId:tree_luck_award node:rule_stock code:0001
24-05-02.23:03:51.567 [http-nio-8091-exec-8] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100006 103 null
24-05-02.23:03:51.598 [http-nio-8091-exec-9] INFO  RaffleController       - 随机抽奖完成： strategyID: 100006 response: {"code":"0000","data":{"awardId":107,"awardIndex":7},"info":"成功"}
24-05-02.23:03:51.600 [http-nio-8091-exec-10] INFO  RaffleController       - 随机抽奖完成： strategyID: 100006 response: {"code":"0000","data":{"awardId":108,"awardIndex":8},"info":"成功"}
24-05-02.23:03:51.600 [http-nio-8091-exec-8] INFO  RaffleController       - 随机抽奖完成： strategyID: 100006 response: {"code":"0000","data":{"awardId":103,"awardIndex":3},"info":"成功"}
24-05-02.23:03:51.601 [http-nio-8091-exec-3] INFO  RaffleController       - 随机抽奖开始： strategyID: 100006
24-05-02.23:03:51.602 [http-nio-8091-exec-2] INFO  RaffleController       - 随机抽奖开始： strategyID: 100006
24-05-02.23:03:51.602 [http-nio-8091-exec-4] INFO  RaffleController       - 随机抽奖开始： strategyID: 100006
24-05-02.23:03:51.741 [http-nio-8091-exec-4] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userID: system strategyID: 100006 ruleModel: rule_default awardId: 107
24-05-02.23:03:51.741 [http-nio-8091-exec-4] INFO  AbstractRaffleStrategy - 抽奖策略计算-责任链 system 100006 107 rule_default
24-05-02.23:03:51.746 [http-nio-8091-exec-2] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userID: system strategyID: 100006 ruleModel: rule_default awardId: 106
24-05-02.23:03:51.746 [http-nio-8091-exec-2] INFO  AbstractRaffleStrategy - 抽奖策略计算-责任链 system 100006 106 rule_default
24-05-02.23:03:51.753 [http-nio-8091-exec-3] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userID: system strategyID: 100006 ruleModel: rule_default awardId: 104
24-05-02.23:03:51.753 [http-nio-8091-exec-3] INFO  AbstractRaffleStrategy - 抽奖策略计算-责任链 system 100006 104 rule_default
24-05-02.23:03:51.816 [http-nio-8091-exec-2] INFO  RuleLockLogicTreeNode  - 规则过滤-次数锁 userId:system strategyId:100006 awardId:106
24-05-02.23:03:51.816 [http-nio-8091-exec-2] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock_1 node:rule_lock code:0000
24-05-02.23:03:51.816 [http-nio-8091-exec-2] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100006 awardId:106
24-05-02.23:03:51.821 [http-nio-8091-exec-4] INFO  RuleLockLogicTreeNode  - 规则过滤-次数锁 userId:system strategyId:100006 awardId:107
24-05-02.23:03:51.821 [http-nio-8091-exec-4] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock_1 node:rule_lock code:0000
24-05-02.23:03:51.821 [http-nio-8091-exec-4] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100006 awardId:107
24-05-02.23:03:51.828 [http-nio-8091-exec-3] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100006 awardId:104
24-05-02.23:03:51.889 [http-nio-8091-exec-2] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId: system strategyId: 100006 awardId: 106
24-05-02.23:03:51.892 [http-nio-8091-exec-4] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId: system strategyId: 100006 awardId: 107
24-05-02.23:03:51.898 [http-nio-8091-exec-3] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId: system strategyId: 100006 awardId: 104
24-05-02.23:03:51.928 [http-nio-8091-exec-2] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock_1 node:rule_stock code:0001
24-05-02.23:03:51.928 [http-nio-8091-exec-2] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100006 106 null
24-05-02.23:03:51.929 [http-nio-8091-exec-4] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock_1 node:rule_stock code:0001
24-05-02.23:03:51.929 [http-nio-8091-exec-4] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100006 107 null
24-05-02.23:03:51.932 [http-nio-8091-exec-3] INFO  DecisionTreeEngine     - 决策树引擎【规则树-兜底奖励】treeId:tree_luck_award node:rule_stock code:0001
24-05-02.23:03:51.933 [http-nio-8091-exec-3] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100006 104 null
24-05-02.23:03:51.960 [http-nio-8091-exec-4] INFO  RaffleController       - 随机抽奖完成： strategyID: 100006 response: {"code":"0000","data":{"awardId":107,"awardIndex":7},"info":"成功"}
24-05-02.23:03:51.962 [http-nio-8091-exec-1] INFO  RaffleController       - 随机抽奖开始： strategyID: 100006
24-05-02.23:03:51.968 [http-nio-8091-exec-2] INFO  RaffleController       - 随机抽奖完成： strategyID: 100006 response: {"code":"0000","data":{"awardId":106,"awardIndex":6},"info":"成功"}
24-05-02.23:03:51.970 [http-nio-8091-exec-5] INFO  RaffleController       - 随机抽奖开始： strategyID: 100006
24-05-02.23:03:51.971 [http-nio-8091-exec-3] INFO  RaffleController       - 随机抽奖完成： strategyID: 100006 response: {"code":"0000","data":{"awardId":104,"awardIndex":4},"info":"成功"}
24-05-02.23:03:51.973 [http-nio-8091-exec-6] INFO  RaffleController       - 随机抽奖开始： strategyID: 100006
24-05-02.23:03:52.111 [http-nio-8091-exec-1] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userID: system strategyID: 100006 ruleModel: rule_default awardId: 108
24-05-02.23:03:52.111 [http-nio-8091-exec-1] INFO  AbstractRaffleStrategy - 抽奖策略计算-责任链 system 100006 108 rule_default
24-05-02.23:03:52.112 [http-nio-8091-exec-5] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userID: system strategyID: 100006 ruleModel: rule_default awardId: 108
24-05-02.23:03:52.112 [http-nio-8091-exec-5] INFO  AbstractRaffleStrategy - 抽奖策略计算-责任链 system 100006 108 rule_default
24-05-02.23:03:52.116 [http-nio-8091-exec-6] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userID: system strategyID: 100006 ruleModel: rule_default awardId: 108
24-05-02.23:03:52.116 [http-nio-8091-exec-6] INFO  AbstractRaffleStrategy - 抽奖策略计算-责任链 system 100006 108 rule_default
24-05-02.23:03:52.184 [http-nio-8091-exec-1] INFO  RuleLockLogicTreeNode  - 规则过滤-次数锁 userId:system strategyId:100006 awardId:108
24-05-02.23:03:52.184 [http-nio-8091-exec-1] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock_2 node:rule_lock code:0000
24-05-02.23:03:52.184 [http-nio-8091-exec-1] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100006 awardId:108
24-05-02.23:03:52.187 [http-nio-8091-exec-6] INFO  RuleLockLogicTreeNode  - 规则过滤-次数锁 userId:system strategyId:100006 awardId:108
24-05-02.23:03:52.187 [http-nio-8091-exec-6] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock_2 node:rule_lock code:0000
24-05-02.23:03:52.187 [http-nio-8091-exec-6] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100006 awardId:108
24-05-02.23:03:52.190 [http-nio-8091-exec-5] INFO  RuleLockLogicTreeNode  - 规则过滤-次数锁 userId:system strategyId:100006 awardId:108
24-05-02.23:03:52.190 [http-nio-8091-exec-5] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock_2 node:rule_lock code:0000
24-05-02.23:03:52.190 [http-nio-8091-exec-5] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100006 awardId:108
24-05-02.23:03:52.259 [http-nio-8091-exec-1] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId: system strategyId: 100006 awardId: 108
24-05-02.23:03:52.261 [http-nio-8091-exec-6] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId: system strategyId: 100006 awardId: 108
24-05-02.23:03:52.262 [http-nio-8091-exec-5] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId: system strategyId: 100006 awardId: 108
24-05-02.23:03:52.292 [http-nio-8091-exec-6] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock_2 node:rule_stock code:0001
24-05-02.23:03:52.293 [http-nio-8091-exec-6] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100006 108 null
24-05-02.23:03:52.294 [http-nio-8091-exec-1] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock_2 node:rule_stock code:0001
24-05-02.23:03:52.294 [http-nio-8091-exec-1] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100006 108 null
24-05-02.23:03:52.300 [http-nio-8091-exec-5] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock_2 node:rule_stock code:0001
24-05-02.23:03:52.300 [http-nio-8091-exec-5] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100006 108 null
24-05-02.23:03:52.332 [http-nio-8091-exec-5] INFO  RaffleController       - 随机抽奖完成： strategyID: 100006 response: {"code":"0000","data":{"awardId":108,"awardIndex":8},"info":"成功"}
24-05-02.23:03:52.332 [http-nio-8091-exec-6] INFO  RaffleController       - 随机抽奖完成： strategyID: 100006 response: {"code":"0000","data":{"awardId":108,"awardIndex":8},"info":"成功"}
24-05-02.23:03:52.332 [http-nio-8091-exec-1] INFO  RaffleController       - 随机抽奖完成： strategyID: 100006 response: {"code":"0000","data":{"awardId":108,"awardIndex":8},"info":"成功"}
24-05-02.23:03:52.334 [http-nio-8091-exec-9] INFO  RaffleController       - 随机抽奖开始： strategyID: 100006
24-05-02.23:03:52.334 [http-nio-8091-exec-7] INFO  RaffleController       - 随机抽奖开始： strategyID: 100006
24-05-02.23:03:52.334 [http-nio-8091-exec-8] INFO  RaffleController       - 随机抽奖开始： strategyID: 100006
24-05-02.23:03:52.473 [http-nio-8091-exec-9] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userID: system strategyID: 100006 ruleModel: rule_default awardId: 102
24-05-02.23:03:52.473 [http-nio-8091-exec-9] INFO  AbstractRaffleStrategy - 抽奖策略计算-责任链 system 100006 102 rule_default
24-05-02.23:03:52.482 [http-nio-8091-exec-8] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userID: system strategyID: 100006 ruleModel: rule_default awardId: 106
24-05-02.23:03:52.482 [http-nio-8091-exec-8] INFO  AbstractRaffleStrategy - 抽奖策略计算-责任链 system 100006 106 rule_default
24-05-02.23:03:52.483 [http-nio-8091-exec-7] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userID: system strategyID: 100006 ruleModel: rule_default awardId: 105
24-05-02.23:03:52.483 [http-nio-8091-exec-7] INFO  AbstractRaffleStrategy - 抽奖策略计算-责任链 system 100006 105 rule_default
24-05-02.23:03:52.541 [http-nio-8091-exec-9] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100006 awardId:102
24-05-02.23:03:52.554 [http-nio-8091-exec-7] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100006 awardId:105
24-05-02.23:03:52.557 [http-nio-8091-exec-8] INFO  RuleLockLogicTreeNode  - 规则过滤-次数锁 userId:system strategyId:100006 awardId:106
24-05-02.23:03:52.557 [http-nio-8091-exec-8] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock_1 node:rule_lock code:0000
24-05-02.23:03:52.557 [http-nio-8091-exec-8] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100006 awardId:106
24-05-02.23:03:52.619 [http-nio-8091-exec-9] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId: system strategyId: 100006 awardId: 102
24-05-02.23:03:52.623 [http-nio-8091-exec-8] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId: system strategyId: 100006 awardId: 106
24-05-02.23:03:52.631 [http-nio-8091-exec-7] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId: system strategyId: 100006 awardId: 105
24-05-02.23:03:52.651 [http-nio-8091-exec-9] INFO  DecisionTreeEngine     - 决策树引擎【规则树-兜底奖励】treeId:tree_luck_award node:rule_stock code:0001
24-05-02.23:03:52.651 [http-nio-8091-exec-9] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100006 102 null
24-05-02.23:03:52.660 [http-nio-8091-exec-8] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock_1 node:rule_stock code:0001
24-05-02.23:03:52.660 [http-nio-8091-exec-8] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100006 106 null
24-05-02.23:03:52.669 [http-nio-8091-exec-7] INFO  DecisionTreeEngine     - 决策树引擎【规则树-兜底奖励】treeId:tree_luck_award node:rule_stock code:0001
24-05-02.23:03:52.669 [http-nio-8091-exec-7] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100006 105 null
24-05-02.23:03:52.685 [http-nio-8091-exec-9] INFO  RaffleController       - 随机抽奖完成： strategyID: 100006 response: {"code":"0000","data":{"awardId":102,"awardIndex":2},"info":"成功"}
24-05-02.23:03:52.687 [http-nio-8091-exec-10] INFO  RaffleController       - 随机抽奖开始： strategyID: 100006
24-05-02.23:03:52.698 [http-nio-8091-exec-8] INFO  RaffleController       - 随机抽奖完成： strategyID: 100006 response: {"code":"0000","data":{"awardId":106,"awardIndex":6},"info":"成功"}
24-05-02.23:03:52.700 [http-nio-8091-exec-4] INFO  RaffleController       - 随机抽奖开始： strategyID: 100006
24-05-02.23:03:52.700 [http-nio-8091-exec-7] INFO  RaffleController       - 随机抽奖完成： strategyID: 100006 response: {"code":"0000","data":{"awardId":105,"awardIndex":5},"info":"成功"}
24-05-02.23:03:52.702 [http-nio-8091-exec-2] INFO  RaffleController       - 随机抽奖开始： strategyID: 100006
24-05-02.23:03:52.831 [http-nio-8091-exec-10] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userID: system strategyID: 100006 ruleModel: rule_default awardId: 105
24-05-02.23:03:52.831 [http-nio-8091-exec-10] INFO  AbstractRaffleStrategy - 抽奖策略计算-责任链 system 100006 105 rule_default
24-05-02.23:03:52.843 [http-nio-8091-exec-2] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userID: system strategyID: 100006 ruleModel: rule_default awardId: 106
24-05-02.23:03:52.843 [http-nio-8091-exec-2] INFO  AbstractRaffleStrategy - 抽奖策略计算-责任链 system 100006 106 rule_default
24-05-02.23:03:52.850 [http-nio-8091-exec-4] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userID: system strategyID: 100006 ruleModel: rule_default awardId: 107
24-05-02.23:03:52.850 [http-nio-8091-exec-4] INFO  AbstractRaffleStrategy - 抽奖策略计算-责任链 system 100006 107 rule_default
24-05-02.23:03:52.900 [http-nio-8091-exec-10] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100006 awardId:105
24-05-02.23:03:52.918 [http-nio-8091-exec-4] INFO  RuleLockLogicTreeNode  - 规则过滤-次数锁 userId:system strategyId:100006 awardId:107
24-05-02.23:03:52.918 [http-nio-8091-exec-4] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock_1 node:rule_lock code:0000
24-05-02.23:03:52.918 [http-nio-8091-exec-4] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100006 awardId:107
24-05-02.23:03:52.923 [http-nio-8091-exec-2] INFO  RuleLockLogicTreeNode  - 规则过滤-次数锁 userId:system strategyId:100006 awardId:106
24-05-02.23:03:52.923 [http-nio-8091-exec-2] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock_1 node:rule_lock code:0000
24-05-02.23:03:52.923 [http-nio-8091-exec-2] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100006 awardId:106
24-05-02.23:03:52.969 [http-nio-8091-exec-10] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId: system strategyId: 100006 awardId: 105
24-05-02.23:03:52.997 [http-nio-8091-exec-4] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId: system strategyId: 100006 awardId: 107
24-05-02.23:03:52.998 [http-nio-8091-exec-2] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId: system strategyId: 100006 awardId: 106
24-05-02.23:03:53.004 [http-nio-8091-exec-10] INFO  DecisionTreeEngine     - 决策树引擎【规则树-兜底奖励】treeId:tree_luck_award node:rule_stock code:0001
24-05-02.23:03:53.004 [http-nio-8091-exec-10] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100006 105 null
24-05-02.23:03:53.030 [http-nio-8091-exec-2] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock_1 node:rule_stock code:0001
24-05-02.23:03:53.030 [http-nio-8091-exec-2] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100006 106 null
24-05-02.23:03:53.035 [http-nio-8091-exec-4] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock_1 node:rule_stock code:0001
24-05-02.23:03:53.036 [http-nio-8091-exec-4] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100006 107 null
24-05-02.23:03:53.042 [http-nio-8091-exec-10] INFO  RaffleController       - 随机抽奖完成： strategyID: 100006 response: {"code":"0000","data":{"awardId":105,"awardIndex":5},"info":"成功"}
24-05-02.23:03:53.068 [http-nio-8091-exec-2] INFO  RaffleController       - 随机抽奖完成： strategyID: 100006 response: {"code":"0000","data":{"awardId":106,"awardIndex":6},"info":"成功"}
24-05-02.23:03:53.071 [http-nio-8091-exec-4] INFO  RaffleController       - 随机抽奖完成： strategyID: 100006 response: {"code":"0000","data":{"awardId":107,"awardIndex":7},"info":"成功"}
24-05-02.23:03:55.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.23:03:55.038 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存 strategyId:100006 awardId:104
24-05-02.23:03:56.422 [http-nio-8091-exec-3] INFO  RaffleController       - 随机抽奖开始： strategyID: 100006
24-05-02.23:03:56.422 [http-nio-8091-exec-1] INFO  RaffleController       - 随机抽奖开始： strategyID: 100006
24-05-02.23:03:56.422 [http-nio-8091-exec-5] INFO  RaffleController       - 随机抽奖开始： strategyID: 100006
24-05-02.23:03:56.563 [http-nio-8091-exec-5] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userID: system strategyID: 100006 ruleModel: rule_default awardId: 105
24-05-02.23:03:56.563 [http-nio-8091-exec-5] INFO  AbstractRaffleStrategy - 抽奖策略计算-责任链 system 100006 105 rule_default
24-05-02.23:03:56.566 [http-nio-8091-exec-1] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userID: system strategyID: 100006 ruleModel: rule_default awardId: 103
24-05-02.23:03:56.567 [http-nio-8091-exec-1] INFO  AbstractRaffleStrategy - 抽奖策略计算-责任链 system 100006 103 rule_default
24-05-02.23:03:56.571 [http-nio-8091-exec-3] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userID: system strategyID: 100006 ruleModel: rule_default awardId: 105
24-05-02.23:03:56.571 [http-nio-8091-exec-3] INFO  AbstractRaffleStrategy - 抽奖策略计算-责任链 system 100006 105 rule_default
24-05-02.23:03:56.672 [http-nio-8091-exec-3] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100006 awardId:105
24-05-02.23:03:56.673 [http-nio-8091-exec-5] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100006 awardId:105
24-05-02.23:03:56.676 [http-nio-8091-exec-1] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100006 awardId:103
24-05-02.23:03:56.737 [http-nio-8091-exec-3] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId: system strategyId: 100006 awardId: 105
24-05-02.23:03:56.749 [http-nio-8091-exec-1] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId: system strategyId: 100006 awardId: 103
24-05-02.23:03:56.749 [http-nio-8091-exec-5] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId: system strategyId: 100006 awardId: 105
24-05-02.23:03:56.775 [http-nio-8091-exec-3] INFO  DecisionTreeEngine     - 决策树引擎【规则树-兜底奖励】treeId:tree_luck_award node:rule_stock code:0001
24-05-02.23:03:56.776 [http-nio-8091-exec-3] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100006 105 null
24-05-02.23:03:56.788 [http-nio-8091-exec-5] INFO  DecisionTreeEngine     - 决策树引擎【规则树-兜底奖励】treeId:tree_luck_award node:rule_stock code:0001
24-05-02.23:03:56.788 [http-nio-8091-exec-5] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100006 105 null
24-05-02.23:03:56.794 [http-nio-8091-exec-1] INFO  DecisionTreeEngine     - 决策树引擎【规则树-兜底奖励】treeId:tree_luck_award node:rule_stock code:0001
24-05-02.23:03:56.794 [http-nio-8091-exec-1] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100006 103 null
24-05-02.23:03:56.810 [http-nio-8091-exec-3] INFO  RaffleController       - 随机抽奖完成： strategyID: 100006 response: {"code":"0000","data":{"awardId":105,"awardIndex":5},"info":"成功"}
24-05-02.23:03:56.811 [http-nio-8091-exec-6] INFO  RaffleController       - 随机抽奖开始： strategyID: 100006
24-05-02.23:03:56.825 [http-nio-8091-exec-5] INFO  RaffleController       - 随机抽奖完成： strategyID: 100006 response: {"code":"0000","data":{"awardId":105,"awardIndex":5},"info":"成功"}
24-05-02.23:03:56.826 [http-nio-8091-exec-9] INFO  RaffleController       - 随机抽奖开始： strategyID: 100006
24-05-02.23:03:56.832 [http-nio-8091-exec-1] INFO  RaffleController       - 随机抽奖完成： strategyID: 100006 response: {"code":"0000","data":{"awardId":103,"awardIndex":3},"info":"成功"}
24-05-02.23:03:56.835 [http-nio-8091-exec-8] INFO  RaffleController       - 随机抽奖开始： strategyID: 100006
24-05-02.23:03:56.956 [http-nio-8091-exec-6] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userID: system strategyID: 100006 ruleModel: rule_default awardId: 103
24-05-02.23:03:56.956 [http-nio-8091-exec-6] INFO  AbstractRaffleStrategy - 抽奖策略计算-责任链 system 100006 103 rule_default
24-05-02.23:03:56.968 [http-nio-8091-exec-9] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userID: system strategyID: 100006 ruleModel: rule_default awardId: 107
24-05-02.23:03:56.968 [http-nio-8091-exec-9] INFO  AbstractRaffleStrategy - 抽奖策略计算-责任链 system 100006 107 rule_default
24-05-02.23:03:56.975 [http-nio-8091-exec-8] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userID: system strategyID: 100006 ruleModel: rule_default awardId: 102
24-05-02.23:03:56.975 [http-nio-8091-exec-8] INFO  AbstractRaffleStrategy - 抽奖策略计算-责任链 system 100006 102 rule_default
24-05-02.23:03:57.023 [http-nio-8091-exec-6] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100006 awardId:103
24-05-02.23:03:57.042 [http-nio-8091-exec-9] INFO  RuleLockLogicTreeNode  - 规则过滤-次数锁 userId:system strategyId:100006 awardId:107
24-05-02.23:03:57.042 [http-nio-8091-exec-9] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock_1 node:rule_lock code:0000
24-05-02.23:03:57.042 [http-nio-8091-exec-9] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100006 awardId:107
24-05-02.23:03:57.054 [http-nio-8091-exec-8] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100006 awardId:102
24-05-02.23:03:57.099 [http-nio-8091-exec-6] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId: system strategyId: 100006 awardId: 103
24-05-02.23:03:57.112 [http-nio-8091-exec-9] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId: system strategyId: 100006 awardId: 107
24-05-02.23:03:57.127 [http-nio-8091-exec-8] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId: system strategyId: 100006 awardId: 102
24-05-02.23:03:57.131 [http-nio-8091-exec-6] INFO  DecisionTreeEngine     - 决策树引擎【规则树-兜底奖励】treeId:tree_luck_award node:rule_stock code:0001
24-05-02.23:03:57.131 [http-nio-8091-exec-6] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100006 103 null
24-05-02.23:03:57.146 [http-nio-8091-exec-9] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock_1 node:rule_stock code:0001
24-05-02.23:03:57.146 [http-nio-8091-exec-9] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100006 107 null
24-05-02.23:03:57.165 [http-nio-8091-exec-8] INFO  DecisionTreeEngine     - 决策树引擎【规则树-兜底奖励】treeId:tree_luck_award node:rule_stock code:0001
24-05-02.23:03:57.165 [http-nio-8091-exec-8] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100006 102 null
24-05-02.23:03:57.169 [http-nio-8091-exec-6] INFO  RaffleController       - 随机抽奖完成： strategyID: 100006 response: {"code":"0000","data":{"awardId":103,"awardIndex":3},"info":"成功"}
24-05-02.23:03:57.170 [http-nio-8091-exec-7] INFO  RaffleController       - 随机抽奖开始： strategyID: 100006
24-05-02.23:03:57.184 [http-nio-8091-exec-9] INFO  RaffleController       - 随机抽奖完成： strategyID: 100006 response: {"code":"0000","data":{"awardId":107,"awardIndex":7},"info":"成功"}
24-05-02.23:03:57.186 [http-nio-8091-exec-10] INFO  RaffleController       - 随机抽奖开始： strategyID: 100006
24-05-02.23:03:57.196 [http-nio-8091-exec-8] INFO  RaffleController       - 随机抽奖完成： strategyID: 100006 response: {"code":"0000","data":{"awardId":102,"awardIndex":2},"info":"成功"}
24-05-02.23:03:57.198 [http-nio-8091-exec-2] INFO  RaffleController       - 随机抽奖开始： strategyID: 100006
24-05-02.23:03:57.311 [http-nio-8091-exec-7] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userID: system strategyID: 100006 ruleModel: rule_default awardId: 107
24-05-02.23:03:57.311 [http-nio-8091-exec-7] INFO  AbstractRaffleStrategy - 抽奖策略计算-责任链 system 100006 107 rule_default
24-05-02.23:03:57.326 [http-nio-8091-exec-10] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userID: system strategyID: 100006 ruleModel: rule_default awardId: 102
24-05-02.23:03:57.326 [http-nio-8091-exec-10] INFO  AbstractRaffleStrategy - 抽奖策略计算-责任链 system 100006 102 rule_default
24-05-02.23:03:57.347 [http-nio-8091-exec-2] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userID: system strategyID: 100006 ruleModel: rule_default awardId: 107
24-05-02.23:03:57.347 [http-nio-8091-exec-2] INFO  AbstractRaffleStrategy - 抽奖策略计算-责任链 system 100006 107 rule_default
24-05-02.23:03:57.381 [http-nio-8091-exec-7] INFO  RuleLockLogicTreeNode  - 规则过滤-次数锁 userId:system strategyId:100006 awardId:107
24-05-02.23:03:57.381 [http-nio-8091-exec-7] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock_1 node:rule_lock code:0000
24-05-02.23:03:57.381 [http-nio-8091-exec-7] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100006 awardId:107
24-05-02.23:03:57.419 [http-nio-8091-exec-2] INFO  RuleLockLogicTreeNode  - 规则过滤-次数锁 userId:system strategyId:100006 awardId:107
24-05-02.23:03:57.419 [http-nio-8091-exec-2] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock_1 node:rule_lock code:0000
24-05-02.23:03:57.419 [http-nio-8091-exec-2] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100006 awardId:107
24-05-02.23:03:57.419 [http-nio-8091-exec-10] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100006 awardId:102
24-05-02.23:03:57.459 [http-nio-8091-exec-7] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId: system strategyId: 100006 awardId: 107
24-05-02.23:03:57.489 [http-nio-8091-exec-10] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId: system strategyId: 100006 awardId: 102
24-05-02.23:03:57.491 [http-nio-8091-exec-2] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId: system strategyId: 100006 awardId: 107
24-05-02.23:03:57.499 [http-nio-8091-exec-7] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock_1 node:rule_stock code:0001
24-05-02.23:03:57.499 [http-nio-8091-exec-7] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100006 107 null
24-05-02.23:03:57.526 [http-nio-8091-exec-10] INFO  DecisionTreeEngine     - 决策树引擎【规则树-兜底奖励】treeId:tree_luck_award node:rule_stock code:0001
24-05-02.23:03:57.526 [http-nio-8091-exec-10] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100006 102 null
24-05-02.23:03:57.530 [http-nio-8091-exec-2] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock_1 node:rule_stock code:0001
24-05-02.23:03:57.530 [http-nio-8091-exec-2] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100006 107 null
24-05-02.23:03:57.533 [http-nio-8091-exec-7] INFO  RaffleController       - 随机抽奖完成： strategyID: 100006 response: {"code":"0000","data":{"awardId":107,"awardIndex":7},"info":"成功"}
24-05-02.23:03:57.535 [http-nio-8091-exec-4] INFO  RaffleController       - 随机抽奖开始： strategyID: 100006
24-05-02.23:03:57.558 [http-nio-8091-exec-10] INFO  RaffleController       - 随机抽奖完成： strategyID: 100006 response: {"code":"0000","data":{"awardId":102,"awardIndex":2},"info":"成功"}
24-05-02.23:03:57.559 [http-nio-8091-exec-3] INFO  RaffleController       - 随机抽奖开始： strategyID: 100006
24-05-02.23:03:57.569 [http-nio-8091-exec-2] INFO  RaffleController       - 随机抽奖完成： strategyID: 100006 response: {"code":"0000","data":{"awardId":107,"awardIndex":7},"info":"成功"}
24-05-02.23:03:57.571 [http-nio-8091-exec-5] INFO  RaffleController       - 随机抽奖开始： strategyID: 100006
24-05-02.23:03:57.677 [http-nio-8091-exec-4] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userID: system strategyID: 100006 ruleModel: rule_default awardId: 102
24-05-02.23:03:57.677 [http-nio-8091-exec-4] INFO  AbstractRaffleStrategy - 抽奖策略计算-责任链 system 100006 102 rule_default
24-05-02.23:03:57.706 [http-nio-8091-exec-3] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userID: system strategyID: 100006 ruleModel: rule_default awardId: 105
24-05-02.23:03:57.706 [http-nio-8091-exec-3] INFO  AbstractRaffleStrategy - 抽奖策略计算-责任链 system 100006 105 rule_default
24-05-02.23:03:57.720 [http-nio-8091-exec-5] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userID: system strategyID: 100006 ruleModel: rule_default awardId: 108
24-05-02.23:03:57.720 [http-nio-8091-exec-5] INFO  AbstractRaffleStrategy - 抽奖策略计算-责任链 system 100006 108 rule_default
24-05-02.23:03:57.746 [http-nio-8091-exec-4] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100006 awardId:102
24-05-02.23:03:57.772 [http-nio-8091-exec-3] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100006 awardId:105
24-05-02.23:03:57.798 [http-nio-8091-exec-5] INFO  RuleLockLogicTreeNode  - 规则过滤-次数锁 userId:system strategyId:100006 awardId:108
24-05-02.23:03:57.798 [http-nio-8091-exec-5] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock_2 node:rule_lock code:0000
24-05-02.23:03:57.798 [http-nio-8091-exec-5] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100006 awardId:108
24-05-02.23:03:57.817 [http-nio-8091-exec-4] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId: system strategyId: 100006 awardId: 102
24-05-02.23:03:57.849 [http-nio-8091-exec-3] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId: system strategyId: 100006 awardId: 105
24-05-02.23:03:57.853 [http-nio-8091-exec-4] INFO  DecisionTreeEngine     - 决策树引擎【规则树-兜底奖励】treeId:tree_luck_award node:rule_stock code:0001
24-05-02.23:03:57.853 [http-nio-8091-exec-4] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100006 102 null
24-05-02.23:03:57.870 [http-nio-8091-exec-5] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId: system strategyId: 100006 awardId: 108
24-05-02.23:03:57.881 [http-nio-8091-exec-3] INFO  DecisionTreeEngine     - 决策树引擎【规则树-兜底奖励】treeId:tree_luck_award node:rule_stock code:0001
24-05-02.23:03:57.881 [http-nio-8091-exec-3] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100006 105 null
24-05-02.23:03:57.888 [http-nio-8091-exec-4] INFO  RaffleController       - 随机抽奖完成： strategyID: 100006 response: {"code":"0000","data":{"awardId":102,"awardIndex":2},"info":"成功"}
24-05-02.23:03:57.889 [http-nio-8091-exec-1] INFO  RaffleController       - 随机抽奖开始： strategyID: 100006
24-05-02.23:03:57.909 [http-nio-8091-exec-5] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock_2 node:rule_stock code:0001
24-05-02.23:03:57.910 [http-nio-8091-exec-5] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100006 108 null
24-05-02.23:03:57.919 [http-nio-8091-exec-3] INFO  RaffleController       - 随机抽奖完成： strategyID: 100006 response: {"code":"0000","data":{"awardId":105,"awardIndex":5},"info":"成功"}
24-05-02.23:03:57.921 [http-nio-8091-exec-6] INFO  RaffleController       - 随机抽奖开始： strategyID: 100006
24-05-02.23:03:57.942 [http-nio-8091-exec-5] INFO  RaffleController       - 随机抽奖完成： strategyID: 100006 response: {"code":"0000","data":{"awardId":108,"awardIndex":8},"info":"成功"}
24-05-02.23:03:57.944 [http-nio-8091-exec-9] INFO  RaffleController       - 随机抽奖开始： strategyID: 100006
24-05-02.23:03:58.036 [http-nio-8091-exec-1] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userID: system strategyID: 100006 ruleModel: rule_default awardId: 106
24-05-02.23:03:58.036 [http-nio-8091-exec-1] INFO  AbstractRaffleStrategy - 抽奖策略计算-责任链 system 100006 106 rule_default
24-05-02.23:03:58.064 [http-nio-8091-exec-6] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userID: system strategyID: 100006 ruleModel: rule_default awardId: 105
24-05-02.23:03:58.064 [http-nio-8091-exec-6] INFO  AbstractRaffleStrategy - 抽奖策略计算-责任链 system 100006 105 rule_default
24-05-02.23:03:58.088 [http-nio-8091-exec-9] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userID: system strategyID: 100006 ruleModel: rule_default awardId: 101
24-05-02.23:03:58.088 [http-nio-8091-exec-9] INFO  AbstractRaffleStrategy - 抽奖策略计算-责任链 system 100006 101 rule_default
24-05-02.23:03:58.112 [http-nio-8091-exec-1] INFO  RuleLockLogicTreeNode  - 规则过滤-次数锁 userId:system strategyId:100006 awardId:106
24-05-02.23:03:58.112 [http-nio-8091-exec-1] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock_1 node:rule_lock code:0000
24-05-02.23:03:58.112 [http-nio-8091-exec-1] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100006 awardId:106
24-05-02.23:03:58.134 [http-nio-8091-exec-6] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100006 awardId:105
24-05-02.23:03:58.156 [http-nio-8091-exec-9] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100006 awardId:101
24-05-02.23:03:58.189 [http-nio-8091-exec-1] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId: system strategyId: 100006 awardId: 106
24-05-02.23:03:58.205 [http-nio-8091-exec-6] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId: system strategyId: 100006 awardId: 105
24-05-02.23:03:58.221 [http-nio-8091-exec-1] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock_1 node:rule_stock code:0001
24-05-02.23:03:58.221 [http-nio-8091-exec-1] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100006 106 null
24-05-02.23:03:58.227 [http-nio-8091-exec-9] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId: system strategyId: 100006 awardId: 101
24-05-02.23:03:58.244 [http-nio-8091-exec-6] INFO  DecisionTreeEngine     - 决策树引擎【规则树-兜底奖励】treeId:tree_luck_award node:rule_stock code:0001
24-05-02.23:03:58.244 [http-nio-8091-exec-6] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100006 105 null
24-05-02.23:03:58.259 [http-nio-8091-exec-1] INFO  RaffleController       - 随机抽奖完成： strategyID: 100006 response: {"code":"0000","data":{"awardId":106,"awardIndex":6},"info":"成功"}
24-05-02.23:03:58.260 [http-nio-8091-exec-8] INFO  RaffleController       - 随机抽奖开始： strategyID: 100006
24-05-02.23:03:58.276 [http-nio-8091-exec-6] INFO  RaffleController       - 随机抽奖完成： strategyID: 100006 response: {"code":"0000","data":{"awardId":105,"awardIndex":5},"info":"成功"}
24-05-02.23:03:58.276 [http-nio-8091-exec-9] INFO  DecisionTreeEngine     - 决策树引擎【规则树-兜底奖励】treeId:tree_luck_award node:rule_stock code:0001
24-05-02.23:03:58.276 [http-nio-8091-exec-9] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100006 101 null
24-05-02.23:03:58.277 [http-nio-8091-exec-7] INFO  RaffleController       - 随机抽奖开始： strategyID: 100006
24-05-02.23:03:58.315 [http-nio-8091-exec-9] INFO  RaffleController       - 随机抽奖完成： strategyID: 100006 response: {"code":"0000","data":{"awardId":101,"awardIndex":1},"info":"成功"}
24-05-02.23:03:58.316 [http-nio-8091-exec-10] INFO  RaffleController       - 随机抽奖开始： strategyID: 100006
24-05-02.23:03:58.399 [http-nio-8091-exec-8] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userID: system strategyID: 100006 ruleModel: rule_default awardId: 103
24-05-02.23:03:58.399 [http-nio-8091-exec-8] INFO  AbstractRaffleStrategy - 抽奖策略计算-责任链 system 100006 103 rule_default
24-05-02.23:03:58.422 [http-nio-8091-exec-7] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userID: system strategyID: 100006 ruleModel: rule_default awardId: 101
24-05-02.23:03:58.422 [http-nio-8091-exec-7] INFO  AbstractRaffleStrategy - 抽奖策略计算-责任链 system 100006 101 rule_default
24-05-02.23:03:58.459 [http-nio-8091-exec-10] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userID: system strategyID: 100006 ruleModel: rule_default awardId: 106
24-05-02.23:03:58.459 [http-nio-8091-exec-10] INFO  AbstractRaffleStrategy - 抽奖策略计算-责任链 system 100006 106 rule_default
24-05-02.23:03:58.493 [http-nio-8091-exec-7] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100006 awardId:101
24-05-02.23:03:58.514 [http-nio-8091-exec-8] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100006 awardId:103
24-05-02.23:03:58.532 [http-nio-8091-exec-10] INFO  RuleLockLogicTreeNode  - 规则过滤-次数锁 userId:system strategyId:100006 awardId:106
24-05-02.23:03:58.532 [http-nio-8091-exec-10] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock_1 node:rule_lock code:0000
24-05-02.23:03:58.532 [http-nio-8091-exec-10] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100006 awardId:106
24-05-02.23:03:58.570 [http-nio-8091-exec-7] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId: system strategyId: 100006 awardId: 101
24-05-02.23:03:58.587 [http-nio-8091-exec-8] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId: system strategyId: 100006 awardId: 103
24-05-02.23:03:58.610 [http-nio-8091-exec-7] INFO  DecisionTreeEngine     - 决策树引擎【规则树-兜底奖励】treeId:tree_luck_award node:rule_stock code:0001
24-05-02.23:03:58.610 [http-nio-8091-exec-7] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100006 101 null
24-05-02.23:03:58.611 [http-nio-8091-exec-10] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId: system strategyId: 100006 awardId: 106
24-05-02.23:03:58.622 [http-nio-8091-exec-8] INFO  DecisionTreeEngine     - 决策树引擎【规则树-兜底奖励】treeId:tree_luck_award node:rule_stock code:0001
24-05-02.23:03:58.622 [http-nio-8091-exec-8] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100006 103 null
24-05-02.23:03:58.649 [http-nio-8091-exec-7] INFO  RaffleController       - 随机抽奖完成： strategyID: 100006 response: {"code":"0000","data":{"awardId":101,"awardIndex":1},"info":"成功"}
24-05-02.23:03:58.649 [http-nio-8091-exec-10] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock_1 node:rule_stock code:0001
24-05-02.23:03:58.649 [http-nio-8091-exec-10] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100006 106 null
24-05-02.23:03:58.651 [http-nio-8091-exec-2] INFO  RaffleController       - 随机抽奖开始： strategyID: 100006
24-05-02.23:03:58.663 [http-nio-8091-exec-8] INFO  RaffleController       - 随机抽奖完成： strategyID: 100006 response: {"code":"0000","data":{"awardId":103,"awardIndex":3},"info":"成功"}
24-05-02.23:03:58.666 [http-nio-8091-exec-4] INFO  RaffleController       - 随机抽奖开始： strategyID: 100006
24-05-02.23:03:58.682 [http-nio-8091-exec-10] INFO  RaffleController       - 随机抽奖完成： strategyID: 100006 response: {"code":"0000","data":{"awardId":106,"awardIndex":6},"info":"成功"}
24-05-02.23:03:58.683 [http-nio-8091-exec-3] INFO  RaffleController       - 随机抽奖开始： strategyID: 100006
24-05-02.23:03:58.795 [http-nio-8091-exec-2] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userID: system strategyID: 100006 ruleModel: rule_default awardId: 107
24-05-02.23:03:58.795 [http-nio-8091-exec-2] INFO  AbstractRaffleStrategy - 抽奖策略计算-责任链 system 100006 107 rule_default
24-05-02.23:03:58.809 [http-nio-8091-exec-4] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userID: system strategyID: 100006 ruleModel: rule_default awardId: 105
24-05-02.23:03:58.809 [http-nio-8091-exec-4] INFO  AbstractRaffleStrategy - 抽奖策略计算-责任链 system 100006 105 rule_default
24-05-02.23:03:58.832 [http-nio-8091-exec-3] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userID: system strategyID: 100006 ruleModel: rule_default awardId: 102
24-05-02.23:03:58.832 [http-nio-8091-exec-3] INFO  AbstractRaffleStrategy - 抽奖策略计算-责任链 system 100006 102 rule_default
24-05-02.23:03:58.870 [http-nio-8091-exec-2] INFO  RuleLockLogicTreeNode  - 规则过滤-次数锁 userId:system strategyId:100006 awardId:107
24-05-02.23:03:58.870 [http-nio-8091-exec-2] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock_1 node:rule_lock code:0000
24-05-02.23:03:58.870 [http-nio-8091-exec-2] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100006 awardId:107
24-05-02.23:03:58.888 [http-nio-8091-exec-4] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100006 awardId:105
24-05-02.23:03:58.895 [http-nio-8091-exec-3] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100006 awardId:102
24-05-02.23:03:58.944 [http-nio-8091-exec-2] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId: system strategyId: 100006 awardId: 107
24-05-02.23:03:58.958 [http-nio-8091-exec-4] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId: system strategyId: 100006 awardId: 105
24-05-02.23:03:58.968 [http-nio-8091-exec-3] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId: system strategyId: 100006 awardId: 102
24-05-02.23:03:58.984 [http-nio-8091-exec-2] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock_1 node:rule_stock code:0001
24-05-02.23:03:58.984 [http-nio-8091-exec-2] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100006 107 null
24-05-02.23:03:58.996 [http-nio-8091-exec-4] INFO  DecisionTreeEngine     - 决策树引擎【规则树-兜底奖励】treeId:tree_luck_award node:rule_stock code:0001
24-05-02.23:03:58.996 [http-nio-8091-exec-4] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100006 105 null
24-05-02.23:03:59.007 [http-nio-8091-exec-3] INFO  DecisionTreeEngine     - 决策树引擎【规则树-兜底奖励】treeId:tree_luck_award node:rule_stock code:0001
24-05-02.23:03:59.007 [http-nio-8091-exec-3] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100006 102 null
24-05-02.23:03:59.015 [http-nio-8091-exec-2] INFO  RaffleController       - 随机抽奖完成： strategyID: 100006 response: {"code":"0000","data":{"awardId":107,"awardIndex":7},"info":"成功"}
24-05-02.23:03:59.018 [http-nio-8091-exec-5] INFO  RaffleController       - 随机抽奖开始： strategyID: 100006
24-05-02.23:03:59.031 [http-nio-8091-exec-4] INFO  RaffleController       - 随机抽奖完成： strategyID: 100006 response: {"code":"0000","data":{"awardId":105,"awardIndex":5},"info":"成功"}
24-05-02.23:03:59.033 [http-nio-8091-exec-1] INFO  RaffleController       - 随机抽奖开始： strategyID: 100006
24-05-02.23:03:59.046 [http-nio-8091-exec-3] INFO  RaffleController       - 随机抽奖完成： strategyID: 100006 response: {"code":"0000","data":{"awardId":102,"awardIndex":2},"info":"成功"}
24-05-02.23:03:59.048 [http-nio-8091-exec-6] INFO  RaffleController       - 随机抽奖开始： strategyID: 100006
24-05-02.23:03:59.166 [http-nio-8091-exec-5] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userID: system strategyID: 100006 ruleModel: rule_default awardId: 103
24-05-02.23:03:59.166 [http-nio-8091-exec-5] INFO  AbstractRaffleStrategy - 抽奖策略计算-责任链 system 100006 103 rule_default
24-05-02.23:03:59.179 [http-nio-8091-exec-1] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userID: system strategyID: 100006 ruleModel: rule_default awardId: 104
24-05-02.23:03:59.179 [http-nio-8091-exec-1] INFO  AbstractRaffleStrategy - 抽奖策略计算-责任链 system 100006 104 rule_default
24-05-02.23:03:59.189 [http-nio-8091-exec-6] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userID: system strategyID: 100006 ruleModel: rule_default awardId: 102
24-05-02.23:03:59.189 [http-nio-8091-exec-6] INFO  AbstractRaffleStrategy - 抽奖策略计算-责任链 system 100006 102 rule_default
24-05-02.23:03:59.239 [http-nio-8091-exec-5] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100006 awardId:103
24-05-02.23:03:59.250 [http-nio-8091-exec-1] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100006 awardId:104
24-05-02.23:03:59.260 [http-nio-8091-exec-6] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100006 awardId:102
24-05-02.23:03:59.312 [http-nio-8091-exec-5] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId: system strategyId: 100006 awardId: 103
24-05-02.23:03:59.328 [http-nio-8091-exec-1] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId: system strategyId: 100006 awardId: 104
24-05-02.23:03:59.329 [http-nio-8091-exec-6] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId: system strategyId: 100006 awardId: 102
24-05-02.23:03:59.352 [http-nio-8091-exec-5] INFO  DecisionTreeEngine     - 决策树引擎【规则树-兜底奖励】treeId:tree_luck_award node:rule_stock code:0001
24-05-02.23:03:59.352 [http-nio-8091-exec-5] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100006 103 null
24-05-02.23:03:59.359 [http-nio-8091-exec-1] INFO  DecisionTreeEngine     - 决策树引擎【规则树-兜底奖励】treeId:tree_luck_award node:rule_stock code:0001
24-05-02.23:03:59.359 [http-nio-8091-exec-1] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100006 104 null
24-05-02.23:03:59.365 [http-nio-8091-exec-6] INFO  DecisionTreeEngine     - 决策树引擎【规则树-兜底奖励】treeId:tree_luck_award node:rule_stock code:0001
24-05-02.23:03:59.365 [http-nio-8091-exec-6] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100006 102 null
24-05-02.23:03:59.391 [http-nio-8091-exec-5] INFO  RaffleController       - 随机抽奖完成： strategyID: 100006 response: {"code":"0000","data":{"awardId":103,"awardIndex":3},"info":"成功"}
24-05-02.23:03:59.392 [http-nio-8091-exec-9] INFO  RaffleController       - 随机抽奖开始： strategyID: 100006
24-05-02.23:03:59.397 [http-nio-8091-exec-1] INFO  RaffleController       - 随机抽奖完成： strategyID: 100006 response: {"code":"0000","data":{"awardId":104,"awardIndex":4},"info":"成功"}
24-05-02.23:03:59.399 [http-nio-8091-exec-7] INFO  RaffleController       - 随机抽奖开始： strategyID: 100006
24-05-02.23:03:59.405 [http-nio-8091-exec-6] INFO  RaffleController       - 随机抽奖完成： strategyID: 100006 response: {"code":"0000","data":{"awardId":102,"awardIndex":2},"info":"成功"}
24-05-02.23:03:59.407 [http-nio-8091-exec-8] INFO  RaffleController       - 随机抽奖开始： strategyID: 100006
24-05-02.23:03:59.533 [http-nio-8091-exec-9] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userID: system strategyID: 100006 ruleModel: rule_default awardId: 103
24-05-02.23:03:59.533 [http-nio-8091-exec-9] INFO  AbstractRaffleStrategy - 抽奖策略计算-责任链 system 100006 103 rule_default
24-05-02.23:03:59.541 [http-nio-8091-exec-7] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userID: system strategyID: 100006 ruleModel: rule_default awardId: 105
24-05-02.23:03:59.541 [http-nio-8091-exec-7] INFO  AbstractRaffleStrategy - 抽奖策略计算-责任链 system 100006 105 rule_default
24-05-02.23:03:59.549 [http-nio-8091-exec-8] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userID: system strategyID: 100006 ruleModel: rule_default awardId: 103
24-05-02.23:03:59.549 [http-nio-8091-exec-8] INFO  AbstractRaffleStrategy - 抽奖策略计算-责任链 system 100006 103 rule_default
24-05-02.23:03:59.608 [http-nio-8091-exec-9] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100006 awardId:103
24-05-02.23:03:59.612 [http-nio-8091-exec-7] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100006 awardId:105
24-05-02.23:03:59.628 [http-nio-8091-exec-8] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100006 awardId:103
24-05-02.23:03:59.678 [http-nio-8091-exec-9] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId: system strategyId: 100006 awardId: 103
24-05-02.23:03:59.684 [http-nio-8091-exec-7] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId: system strategyId: 100006 awardId: 105
24-05-02.23:03:59.698 [http-nio-8091-exec-8] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId: system strategyId: 100006 awardId: 103
24-05-02.23:03:59.712 [http-nio-8091-exec-9] INFO  DecisionTreeEngine     - 决策树引擎【规则树-兜底奖励】treeId:tree_luck_award node:rule_stock code:0001
24-05-02.23:03:59.713 [http-nio-8091-exec-9] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100006 103 null
24-05-02.23:03:59.723 [http-nio-8091-exec-7] INFO  DecisionTreeEngine     - 决策树引擎【规则树-兜底奖励】treeId:tree_luck_award node:rule_stock code:0001
24-05-02.23:03:59.723 [http-nio-8091-exec-7] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100006 105 null
24-05-02.23:03:59.736 [http-nio-8091-exec-8] INFO  DecisionTreeEngine     - 决策树引擎【规则树-兜底奖励】treeId:tree_luck_award node:rule_stock code:0001
24-05-02.23:03:59.736 [http-nio-8091-exec-8] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100006 103 null
24-05-02.23:03:59.751 [http-nio-8091-exec-9] INFO  RaffleController       - 随机抽奖完成： strategyID: 100006 response: {"code":"0000","data":{"awardId":103,"awardIndex":3},"info":"成功"}
24-05-02.23:03:59.759 [http-nio-8091-exec-7] INFO  RaffleController       - 随机抽奖完成： strategyID: 100006 response: {"code":"0000","data":{"awardId":105,"awardIndex":5},"info":"成功"}
24-05-02.23:03:59.771 [http-nio-8091-exec-8] INFO  RaffleController       - 随机抽奖完成： strategyID: 100006 response: {"code":"0000","data":{"awardId":103,"awardIndex":3},"info":"成功"}
24-05-02.23:04:00.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.23:04:00.049 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存 strategyId:100006 awardId:101
24-05-02.23:04:05.011 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.23:04:05.050 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存 strategyId:100006 awardId:107
24-05-02.23:04:10.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.23:04:10.039 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存 strategyId:100006 awardId:104
24-05-02.23:04:15.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.23:04:15.037 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存 strategyId:100006 awardId:106
24-05-02.23:04:17.408 [http-nio-8091-exec-3] INFO  RaffleController       - 抽奖装配策略开始： strategyID: 100006
24-05-02.23:04:17.453 [http-nio-8091-exec-3] INFO  RaffleController       - 抽奖装配策略完成： strategyID: 100006, response: {"code":"0000","data":[{"awardId":101,"awardTitle":"随机积分","sort":1},{"awardId":102,"awardTitle":"7等奖","sort":2},{"awardId":103,"awardTitle":"6等奖","sort":3},{"awardId":104,"awardTitle":"5等奖","sort":4},{"awardId":105,"awardTitle":"4等奖","sort":5},{"awardId":106,"awardSubtitle":"抽奖1次后解锁","awardTitle":"3等奖","sort":6},{"awardId":107,"awardSubtitle":"抽奖1次后解锁","awardTitle":"2等奖","sort":7},{"awardId":108,"awardSubtitle":"抽奖2次后解锁","awardTitle":"1等奖","sort":8}],"info":"成功"}
24-05-02.23:04:20.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.23:04:20.050 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存 strategyId:100006 awardId:108
24-05-02.23:04:23.347 [http-nio-8091-exec-9] INFO  RaffleController       - 抽奖装配策略开始： strategyID: 100006
24-05-02.23:04:23.385 [http-nio-8091-exec-9] INFO  RaffleController       - 抽奖装配策略完成： strategyID: 100006, response: {"code":"0000","data":[{"awardId":101,"awardTitle":"随机积分","sort":1},{"awardId":102,"awardTitle":"7等奖","sort":2},{"awardId":103,"awardTitle":"6等奖","sort":3},{"awardId":104,"awardTitle":"5等奖","sort":4},{"awardId":105,"awardTitle":"4等奖","sort":5},{"awardId":106,"awardSubtitle":"抽奖1次后解锁","awardTitle":"3等奖","sort":6},{"awardId":107,"awardSubtitle":"抽奖1次后解锁","awardTitle":"2等奖","sort":7},{"awardId":108,"awardSubtitle":"抽奖2次后解锁","awardTitle":"1等奖","sort":8}],"info":"成功"}
24-05-02.23:04:25.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.23:04:25.039 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存 strategyId:100006 awardId:102
24-05-02.23:04:25.393 [http-nio-8091-exec-8] INFO  RaffleController       - 抽奖装配策略开始： strategyID: 100006
24-05-02.23:04:25.428 [http-nio-8091-exec-8] INFO  RaffleController       - 抽奖装配策略完成： strategyID: 100006, response: {"code":"0000","data":[{"awardId":101,"awardTitle":"随机积分","sort":1},{"awardId":102,"awardTitle":"7等奖","sort":2},{"awardId":103,"awardTitle":"6等奖","sort":3},{"awardId":104,"awardTitle":"5等奖","sort":4},{"awardId":105,"awardTitle":"4等奖","sort":5},{"awardId":106,"awardSubtitle":"抽奖1次后解锁","awardTitle":"3等奖","sort":6},{"awardId":107,"awardSubtitle":"抽奖1次后解锁","awardTitle":"2等奖","sort":7},{"awardId":108,"awardSubtitle":"抽奖2次后解锁","awardTitle":"1等奖","sort":8}],"info":"成功"}
24-05-02.23:04:30.014 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.23:04:30.053 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存 strategyId:100006 awardId:103
24-05-02.23:04:31.787 [http-nio-8091-exec-2] INFO  RaffleController       - 抽奖装配策略开始： strategyID: 100006
24-05-02.23:04:32.223 [http-nio-8091-exec-2] INFO  RaffleController       - 抽奖装配策略完成： strategyID: 100006, response: {"code":"0000","data":true,"info":"成功"}
24-05-02.23:04:33.944 [http-nio-8091-exec-3] INFO  RaffleController       - 抽奖装配策略开始： strategyID: 100006
24-05-02.23:04:34.368 [http-nio-8091-exec-3] INFO  RaffleController       - 抽奖装配策略完成： strategyID: 100006, response: {"code":"0000","data":true,"info":"成功"}
24-05-02.23:04:35.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.23:04:35.040 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存 strategyId:100006 awardId:108
24-05-02.23:04:40.011 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.23:04:40.048 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存 strategyId:100006 awardId:105
24-05-02.23:04:43.992 [http-nio-8091-exec-1] INFO  RaffleController       - 抽奖装配策略开始： strategyID: 100006
24-05-02.23:04:44.420 [http-nio-8091-exec-1] INFO  RaffleController       - 抽奖装配策略完成： strategyID: 100006, response: {"code":"0000","data":true,"info":"成功"}
24-05-02.23:04:45.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.23:04:45.041 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存 strategyId:100006 awardId:104
24-05-02.23:04:50.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.23:04:50.043 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存 strategyId:100006 awardId:107
24-05-02.23:04:50.776 [http-nio-8091-exec-9] INFO  RaffleController       - 抽奖装配策略开始： strategyID: 100006
24-05-02.23:04:50.813 [http-nio-8091-exec-9] INFO  RaffleController       - 抽奖装配策略完成： strategyID: 100006, response: {"code":"0000","data":[{"awardId":101,"awardTitle":"随机积分","sort":1},{"awardId":102,"awardTitle":"7等奖","sort":2},{"awardId":103,"awardTitle":"6等奖","sort":3},{"awardId":104,"awardTitle":"5等奖","sort":4},{"awardId":105,"awardTitle":"4等奖","sort":5},{"awardId":106,"awardSubtitle":"抽奖1次后解锁","awardTitle":"3等奖","sort":6},{"awardId":107,"awardSubtitle":"抽奖1次后解锁","awardTitle":"2等奖","sort":7},{"awardId":108,"awardSubtitle":"抽奖2次后解锁","awardTitle":"1等奖","sort":8}],"info":"成功"}
24-05-02.23:04:55.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.23:04:55.053 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存 strategyId:100006 awardId:101
24-05-02.23:05:00.001 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.23:05:00.034 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存 strategyId:100006 awardId:103
24-05-02.23:05:00.700 [http-nio-8091-exec-8] INFO  RaffleController       - 抽奖装配策略开始： strategyID: 100006
24-05-02.23:05:00.735 [http-nio-8091-exec-8] INFO  RaffleController       - 抽奖装配策略完成： strategyID: 100006, response: {"code":"0000","data":[{"awardId":101,"awardTitle":"随机积分","sort":1},{"awardId":102,"awardTitle":"7等奖","sort":2},{"awardId":103,"awardTitle":"6等奖","sort":3},{"awardId":104,"awardTitle":"5等奖","sort":4},{"awardId":105,"awardTitle":"4等奖","sort":5},{"awardId":106,"awardSubtitle":"抽奖1次后解锁","awardTitle":"3等奖","sort":6},{"awardId":107,"awardSubtitle":"抽奖1次后解锁","awardTitle":"2等奖","sort":7},{"awardId":108,"awardSubtitle":"抽奖2次后解锁","awardTitle":"1等奖","sort":8}],"info":"成功"}
24-05-02.23:05:05.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.23:05:05.040 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存 strategyId:100006 awardId:108
24-05-02.23:05:10.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.23:05:10.048 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存 strategyId:100006 awardId:102
24-05-02.23:05:13.770 [http-nio-8091-exec-2] INFO  RaffleController       - 随机抽奖开始： strategyID: 100006
24-05-02.23:05:13.913 [http-nio-8091-exec-2] INFO  DefaultLogicChain      - 抽奖责任链-默认处理 userID: system strategyID: 100006 ruleModel: rule_default awardId: 108
24-05-02.23:05:13.913 [http-nio-8091-exec-2] INFO  AbstractRaffleStrategy - 抽奖策略计算-责任链 system 100006 108 rule_default
24-05-02.23:05:14.022 [http-nio-8091-exec-2] INFO  RuleLockLogicTreeNode  - 规则过滤-次数锁 userId:system strategyId:100006 awardId:108
24-05-02.23:05:14.022 [http-nio-8091-exec-2] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock_2 node:rule_lock code:0000
24-05-02.23:05:14.022 [http-nio-8091-exec-2] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减 userId:system strategyId:100006 awardId:108
24-05-02.23:05:14.092 [http-nio-8091-exec-2] INFO  RuleStockLogicTreeNode - 规则过滤-库存扣减-成功 userId: system strategyId: 100006 awardId: 108
24-05-02.23:05:14.127 [http-nio-8091-exec-2] INFO  DecisionTreeEngine     - 决策树引擎【规则树】treeId:tree_lock_2 node:rule_stock code:0001
24-05-02.23:05:14.127 [http-nio-8091-exec-2] INFO  AbstractRaffleStrategy - 抽奖策略计算-规则树 system 100006 108 null
24-05-02.23:05:14.164 [http-nio-8091-exec-2] INFO  RaffleController       - 随机抽奖完成： strategyID: 100006 response: {"code":"0000","data":{"awardId":108,"awardIndex":8},"info":"成功"}
24-05-02.23:05:15.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.23:05:15.046 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存 strategyId:100006 awardId:107
24-05-02.23:05:20.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.23:05:20.037 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存 strategyId:100006 awardId:108
24-05-02.23:05:25.015 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.23:05:25.050 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存 strategyId:100006 awardId:103
24-05-02.23:05:30.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.23:05:30.048 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存 strategyId:100006 awardId:106
24-05-02.23:05:35.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.23:05:35.044 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存 strategyId:100006 awardId:107
24-05-02.23:05:40.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.23:05:40.041 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存 strategyId:100006 awardId:104
24-05-02.23:05:45.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.23:05:45.034 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存 strategyId:100006 awardId:108
24-05-02.23:05:50.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.23:05:50.040 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存 strategyId:100006 awardId:108
24-05-02.23:05:55.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.23:05:55.047 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存 strategyId:100006 awardId:108
24-05-02.23:06:00.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.23:06:00.039 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存 strategyId:100006 awardId:102
24-05-02.23:06:05.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.23:06:05.048 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存 strategyId:100006 awardId:106
24-05-02.23:06:10.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.23:06:10.035 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存 strategyId:100006 awardId:105
24-05-02.23:06:15.011 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.23:06:15.046 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存 strategyId:100006 awardId:105
24-05-02.23:06:20.010 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.23:06:20.049 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存 strategyId:100006 awardId:107
24-05-02.23:06:25.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.23:06:25.042 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存 strategyId:100006 awardId:106
24-05-02.23:06:30.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.23:06:30.045 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存 strategyId:100006 awardId:105
24-05-02.23:06:35.004 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.23:06:35.036 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存 strategyId:100006 awardId:103
24-05-02.23:06:40.009 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.23:06:40.044 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存 strategyId:100006 awardId:105
24-05-02.23:06:45.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.23:06:45.043 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存 strategyId:100006 awardId:103
24-05-02.23:06:50.006 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.23:06:50.044 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存 strategyId:100006 awardId:107
24-05-02.23:06:55.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.23:06:55.041 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存 strategyId:100006 awardId:102
24-05-02.23:07:00.012 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.23:07:00.044 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存 strategyId:100006 awardId:107
24-05-02.23:07:05.005 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.23:07:05.039 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存 strategyId:100006 awardId:102
24-05-02.23:07:10.003 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.23:07:10.042 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存 strategyId:100006 awardId:107
24-05-02.23:07:15.007 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.23:07:15.045 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存 strategyId:100006 awardId:102
24-05-02.23:07:20.003 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.23:07:20.040 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存 strategyId:100006 awardId:105
24-05-02.23:07:25.001 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.23:07:25.033 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存 strategyId:100006 awardId:108
24-05-02.23:07:30.011 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.23:07:30.045 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存 strategyId:100006 awardId:106
24-05-02.23:07:35.011 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.23:07:35.050 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存 strategyId:100006 awardId:105
24-05-02.23:07:40.002 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.23:07:40.039 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存 strategyId:100006 awardId:101
24-05-02.23:07:45.008 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.23:07:45.046 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存 strategyId:100006 awardId:101
24-05-02.23:07:50.015 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存【延迟队列获取，降低对数据库的更新频次，不要产生竞争】
24-05-02.23:07:50.047 [scheduling-1    ] INFO  UpdateAwardStockJob    - 定时任务，更新奖品消耗库存 strategyId:100006 awardId:103
24-05-02.23:07:53.595 [SpringApplicationShutdownHook] INFO  HikariDataSource       - HikariPool-1 - Shutdown initiated...
24-05-02.23:07:53.601 [SpringApplicationShutdownHook] INFO  HikariDataSource       - HikariPool-1 - Shutdown completed.
